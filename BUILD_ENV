                            Build Environment
------------------------------------------------------------------------------

Table of Contents
1) Overview of build requirements
    1.a) Building gSOAP in the development environment
2) Building in a Debian/Ubuntu install
    2.a) Building in a chroot
        2.a.1) Using the chroot script
    2.b) Using the setup_env.sh script
    2.c) Using the chroot_wrap.sh script
------------------------------------------------------------------------------

1) Overview of build requirements

    The EIL Linux client agent requires a number of items in order to build.
These items are too numerous, and many are defined dynamically based upon
external dependency build processes, to be listed in great detail. However, from
a very high level, the following items are required in order to build the EIL
Linux client agent:

        * gSOAP 2.8.0
            - Newer versions of gSOAP might work as well, but older versions
            will not. We depend on very specific WS-Addressing plugins only
            available in versions past 2.8.0 . It is left up to the developer to
            establish if a newer version of gSOAP will work, and what (if any)
            modifications to the Linux client agent codebase must happen in
            order to support it.

        * gcc 4.4.x
            - A minimum of gcc 4.4.x is required. Older versions may work as
            well, but are untested.

        * make 3.81
            - Realistically, any recent version of make should work, however,
            3.81 was the exact version present on all distros at the time of
            initial development. Due to design constraints (simple build) we
            wind up having relatively simple makefiles that should work in any
            version of GNU make.

        * bash 3.x
            - Versions of bash in the 3.x to 4.x range have been tested with
            the code in the EIL Linux client agent. Realistically, any version
            of bash within the last decade and into the future should work fine.

1.a) Building gSOAP in the development environment

    The gSOAP development libraries need a variety of items in order to be built
in your build environment. These include (but are not limitted to):

        * flex
        * automake
        * autoconf
        * autotools-dev
        * byacc
        * bison
        * libssl-dev

    These are the names of the packages as they are listed in Debian/Ubuntu, if
you are building gSOAP under another distribution you will have to find other
equivalent options.

    byacc and bison provide similar functionality, but different sections of
the gSOAP build process apparently use different aspects of their features in
different ways, so they are both included for completeness. There may be a way
to reduce these requirements down a single parser, but it is left up to later
developers on the project to find out if this is the case.

2) Building in a Debian/Ubuntu install

2.a) Building in a chroot

    A good practice for isolating your development environment from your build/
test environment is splitting them between a simple chroot barrier. Depending
upon your distribution of choice, the difficulty in creating a chroot can vary.
For our purposes, we assume you are developing in a Debian derived distribution
(such as Ubuntu, or stock Debian) and have access to the debootstrap tool (or a
debootstrap-like tool). debootstrap is apt-gettable and part of a stock Debian or
Ubuntu install.

    Once you have a chroot installed, be sure to enable the full sources in the
/etc/apt/sources.list file, as generally they will just have the basic one(s)
enabled. For example, if I was installing Ubuntu 10.04 LTS "Lucid Lynx", my
sources.list might look like:

        deb http://archive.ubuntu.com/ubuntu lucid main
        deb http://archive.ubuntu.com/ubuntu lucid universe
        deb http://archive.ubuntu.com/ubuntu lucid multiverse

    It is left up to the reader to determine what their full sources.list must
look like for their particular distribution.

2.a.1) Using the chroot script

    Included in the repository is a script which will set up a chroot build and
development environment in a Debian/Ubuntu install. The script's name is
"build_chroot.sh", and takes a single parameter specifying the path to the
chroot to build, e.g.:

        # ./build_chroot.sh /path/to/work/chroots/lucid-buildenv

2.b) Using the setup_env.sh script

    Included in the source repository is the current gSOAP source tree used by
the Linux client agent as well as a script called 'setup_env.sh' which can be
used to automatically set-up a Debian-based distribution (such as Ubuntu) for
development and building of the EIL Linux client agent.

    This script must be run as root, and must be run on a Debian-derived system.
Running on another system (even if that system has apt available on it) will have
undefined results.

    The script is not entirely automated, and will require some user intervention
during key moments. It is recommended that you read the instructions carefully.

2.c) Using the chroot_wrap.sh script

    Maintaining and changing into your chroot build environment can be tedious,
especially if you are working from a laptop or an otherwise isolated development
environment. Thus, the 'chroot_wrap.sh' script was created to automate some of
the tasks which can be tricky to remember when working with chroots.

    This script must be run as root and takes a single argument- the path to a
previously set up chroot build environment (see section "2.a" above). Once
completed, you will be left inside the chroot environment ready to work.

        host-env ~/work/path/# ./chroot_wrap.sh /home/sam/work/intel/chroots/testing
        ... (script runs)
        chroot-env /# _
        ... (everything is now in the chroot)
