                          EIL Linux Client Agent
                          Installation Document
------------------------------------------------------------------------------

Table of Contents
1) Overview
    1.a) How to read this document
2) Introduction to the install tool
3) Package Installation
    3.a) Building a package
    3.b) Making a repository
    3.c) Installing a package using the bootstrap
    3.d) Installing a package manually
4) Manually installing the dispatcher
	4.a) Using the install tool
	4.b) Using the dispatcher installer
5) Manually building the steward
6) Technical details
    6.a) Details of the cross-distribution package

------------------------------------------------------------------------------

1) Overview

    Part of the original design goal of the EIL Linux Client Agent was to have
an install system that was distribution agnostic- meaning it would behave the
same on all supported distributions and no distribution-specific packages would
have to be maintained (see README for more details).

    This document describes the build as well as installation process for the
EIL Linux Client Agent. The intention is to get someone up-and-running as
quickly as possible, thus we will start from a very high-level and then hone in
on more detail.

1.a) How to read this document

    The first sections talk about basic installation using the install tools.
These sections will be from a very high level and will assume only a very basic
understanding of Linux and the Linux command line.

    Later sections will deal with lower level build and the installation
process "under the hood". Think of these sections as a behind the scenes
explanation of the build and installation system.

2) Introduction to the install tool

    The highest level interface to the EIL Linux Client agent build/install
system is the install tool, which must be run as root,

            * install_tool.sh

if the install tool is run without any options, the following usage text is
displayed:

    Usage: install_tool.sh [OPTION]
    Where [OPTION] is one of the following

        --install       Installs the client agent on the system
                        (building as needed)

        --uninstall     Uninstalls the client agent from the system

        --pkginstall    Install the client agent from a package
                        (should not be called unless you know what you are doing)

        --instdisp      Installs just the dispatcher on the system

        --inststew      Installs just the steward on the system

        --uninstdisp    Uninstalls the dispatcher

        --uninststew    Uninstalls the steward

        --build         Build the steward (rebuilding if needed)

        --static        Build the steward with static linking (rebuilding if
                        needed)

        --clean         Clean the steward build environment

        --runtest       Run all the unit tests

        --doc           Install just the documentation

        --pkg           Build an installable package (static linked)

        --makerepo      Build installable package and make a repo.
                        Requires an additional option specifying the URI
                        we should use for the repo. E.g.:
                        --makerepo SOMESERVER:/home/pub/releases/.

    ------------------------------------------------------------------------------

    The following helper options can be added to --pkginstall or --pkg

        -r              The installable package is a release package.
                        This means that the installable package will be named
                        generically if called with --pkg and that the output will
                        go to a log file in /var/log if called with --pkginstall.

    If ran without any options, this usage text will be displayed.

Practically all build/install features and options can be access through this
install tool.

3) Package Installation

    The most common usage of the install tool is the creation of cross-
distribution installation packages. Note that these are *NOT* native packages
for the underlying distribution, rather a single archive containing an
installable set of files which should work across a variety of different
Linux platforms. For more detail on these archives, see section (6.a).

3.a) Building a package

    A package can be built using the '--pkg' option:

            # install_tool.sh --pkg

    This will create a package in your current working directory, with static
linked binaries, and name it:

            eil_clientagent-${VERSION}.tar.gz

where ${VERSION} is the current version of the EIL Linux Client Agent (as
defined in the top-level VERSION file in the repository).

	If you wish to create a release package instead of a named version package,
then you will want to run the install tool with the '-r' option in addition to
the '--pkg' option:

			# install_tool.sh -r --pkg

	The package created by either of these processes can be used in a repository
(section (3.b)), by the bootstrap tool (3.c), or installed manually (3.d).
			
3.b) Making a repository

	The install tool can be used to create a repository suitable for use with
the client agent bootstrap tool (see section (3.c) below). The option to make
a repository is '--makerepo', and requires an additional parameter of a URI
specially formatted to work with the 'scp' command (see 'man scp' for more
information). scp can be used to copy the resulting repository over SSH to
another server (preferred) or to a locally mounted filesystem.

	* Making a repository over an SSH connection onto another server:

			# install_tool.sh --makerepo pilot:/path/to/repo/.
			
	* Making a repository in a locally mounted filesystem:
	
			# install_tool.sh --makerepo /local/path/to/repo/.
			
	When called with '--makerepo', the install tool currently assumes that the
resultant binary is to be linked staticly, and that the package is to be set as
a release (not a named version). Thus, it cleans/rebuilds the binaries, and
bundles up a freshly built package.

3.c) Installing a package using the bootstrap

	Inside the dispatcher tools directory you will find the client agent
bootstrap tool, 'clientagent-bootstrap.sh'. This tool is used to bootstrap an
EIL Linux Client Agent onto a running Linux system either upgrading from a
previous install or installing from scratch. It can be run manually to force
an install/upgrade, or it can be run automatically from the update checker tool
(which is run from a cron job) or fired from a request from the dispatcher
itself.

	Inside the script, you will find the following toggles:

		# Uncomment whichever of the following is correct for this install
		IS_STAGING=yes
		#IS_RELEASE=yes
		
At any given time, one and *ONLY* one of these two toggles should be enabled. If
'IS_STAGING' is set to 'yes', then the bootstrap tool checks the currently set
staging server for updates. If 'IS_RELEASE' is set to 'yes', then the bootstrap
tool checks the currently set release server for updates. As the client agent
is being developed, it is important to keep a staging server active for testing
the EIL Linux Client Agent before release, and this toggle allows for easy
switching between staging and release.

	It is considered best practice to keep 'IS_STAGING' set to 'yes' and
'IS_RELEASE' commented out in the main repository and only toggle them upon
official releases.

	Above these toggles, you will find the following settings:
	
		# EIL IP configs
		EIL_AUTO="172.16.3.10"
		EIL_RELEASE="172.16.3.10"
		EIL_STAGING="10.4.0.26"

These specifically define the various IP addresses used by the client agent
globally.

	During the bootstrap process, the 'clientagent-bootstrap.sh' script will
append the above IP addresses to the '/etc/hosts' file (depending upon the
'IS_RELEASE'/'IS_STAGING' toggle setting) for use globally with the entire
Linux client agent (steward, dispatcher, tests, scripts, and tools). If these
server IP addresses ever change (or new ones need to be added) this is where
the edit must occur.

3.d) Installing a package manually

	A package is just a gzipped tar archive containing the files for the Linux
client agent in a very specific layout. Inside the root directory of the archive
can be found the 'install_root.sh' script, which can be used to install the
client agent from the package archive.

	To install manually from a package, simply un-archive the package, and run
the install tool using the '--pkginstall' option. If the package was created
using the '-r' option (as a 'release') then you will want to pass that option
here as well.

		# tar xvfz eil_clientagent-${VERSION}.tar.gz
		# cd eil_clientagent-${VERSION}/
		# ./install_tool.sh --pkginstall

4) Manually installing the dispatcher

4.a) Using the install tool

	The dispatcher can be installed using the 'install_tool.sh' script with
the '--instdisp' option. This simply wraps the manual process detailed in (4.b)
inside the 'install_tool.sh' script.

		# install_tool.sh --instdisp
		
	An installed dispatcher can be uninstalled using the install tool with the
'--uninstdisp' option. This wraps the 'purge' option detailed in (4.b).

		# install_tool.sh --uninstdisp
	
4.b) Using the dispatcher installer

	

5) Manually building the steward

6) Technical details

6.a) Details of the cross-distribution package

    The cross-distribution installation package is simply a gzipped tar archive
containing a number of files expected to be in a specific layout. At present,
the layout is expected to be as follows:
        .
        ./VERSION
        ./.pkg_version
        ./install_tool.sh
        ./install_tool_esxi.sh
        ./install_helper.sh
        ./dispatcher
        ./dispatcher/install-deps.sh
        ./dispatcher/install.sh
        ./dispatcher/tools
        ./dispatcher/tools/....dispatcher tools
        ....................
        ./dispatcher/tests
        ./dispatcher/tests/....unit tests
        ....................
        ./dispatcher/lib
        ./dispatcher/lib/....shell libraries
        ....................
        ./dispatcher/bin
        ./dispatcher/bin/clientagent-dispatcher.sh
        ./dispatcher/dep-cleaner.sed
        ./dispatcher/scripts
        ./dispatcher/scripts/....scripts
        ....................
        ./dispatcher/docs
        ./dispatcher/docs/....documentation
        ....................
        ./elevate_script
        ./elevate_script/elevate_script
        ./steward
        ./steward/eil_steward

    The 'install_tool.sh' script is the same install_tool script seen before,
however, this time it is not intended to be run by hand. Instead, the script
'clientagent-bootstrap.sh', covered in (3.c) above, will run it.

    'clientagent-bootstrap.sh', when it has determined that an update is ready
(see section (3.c) above) will pull down the updated archive, open it up into
a temporary directory (created in /tmp by the mktemp command), and then execute
either the 'install_tool.sh' or 'install_tool_esxi.sh' script depending upon
whether the system is an ESXi-based system or not.

    The appropriate install tool will be called first to uninstall/purge any
existing EIL Linux Client Agent on the system:

            # ${INSTALL_TOOL} -r --uninstall

and then, it will be called again to install to the system using the special
automated '--pkginstall' option:

            # ${INSTALL_TOOL} -r --pkginstall

    '--pkginstall' is an option that is not intended to be called manually. It
automatically installs the client agent, expecting it to be laid out *exactly*
as detailed in the archive above.
