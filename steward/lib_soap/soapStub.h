/* soapStub.h
   Generated by gSOAP 2.7.9l from EILClientOps.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns4__MachineType
#define SOAP_TYPE_ns4__MachineType (67)
/* ns4:MachineType */
enum ns4__MachineType {ns4__MachineType__ANY = 0, ns4__MachineType__HOST_USCOREWILDCARD = 1, ns4__MachineType__HOST = 2, ns4__MachineType__FQDN = 3, ns4__MachineType__UUID = 4, ns4__MachineType__COLLECTION = 5};
#endif

#ifndef SOAP_TYPE_ns4__EILCommandStatus
#define SOAP_TYPE_ns4__EILCommandStatus (69)
/* ns4:EILCommandStatus */
enum ns4__EILCommandStatus {ns4__EILCommandStatus__COMMAND_USCOREISSUED = 0, ns4__EILCommandStatus__COMMAND_USCORERECEIVED = 1, ns4__EILCommandStatus__COMMAND_USCOREEXECUTION_USCORESTARTED = 2, ns4__EILCommandStatus__COMMAND_USCOREEXECUTION_USCORECOMPLETE = 3, ns4__EILCommandStatus__COMMAND_USCOREFAILED = 4, ns4__EILCommandStatus__WAIT_USCOREFOR_USCOREMANUAL_USCORESTEP = 5, ns4__EILCommandStatus__COMMAND_USCORETIMED_USCOREOUT = 6, ns4__EILCommandStatus__COMMAND_USCOREDELAYED_USCORERESPONSE = 7, ns4__EILCommandStatus__COMMAND_USCORERETRY = 8};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/




#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (7)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() : __item(NULL), soap(NULL) { }
	virtual ~xsd__anyType() { }
};
#endif

#if 0 /* volatile type: do not redeclare */

#endif

#ifndef SOAP_TYPE_xsd__ID_
#define SOAP_TYPE_xsd__ID_ (12)
/* Primitive xsd:ID schema type: */
class SOAP_CMAC xsd__ID_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_xsd__ID_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__ID_()  { }
	virtual ~xsd__ID_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__IDREF_
#define SOAP_TYPE_xsd__IDREF_ (14)
/* Primitive xsd:IDREF schema type: */
class SOAP_CMAC xsd__IDREF_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_xsd__IDREF_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__IDREF_()  { }
	virtual ~xsd__IDREF_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (16)
/* Primitive xsd:QName schema type: */
class SOAP_CMAC xsd__QName_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_xsd__QName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__QName_()  { }
	virtual ~xsd__QName_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (18)
/* Primitive xsd:anyURI schema type: */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_xsd__anyURI_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyURI_()  { }
	virtual ~xsd__anyURI_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (19)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() : __ptr(NULL), __size(0), id(NULL), type(NULL), options(NULL), soap(NULL) { }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (23)
/* Primitive xsd:base64Binary schema type: */
class SOAP_CMAC xsd__base64Binary_ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_xsd__base64Binary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary_()  { }
	virtual ~xsd__base64Binary_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (24)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() : __item((bool)0) { }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (26)
/* Primitive xsd:byte schema type: */
class SOAP_CMAC xsd__byte : public xsd__anyType
{
public:
	char __item;
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_xsd__byte */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__byte() : __item(0) { }
	virtual ~xsd__byte() { }
};
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (27)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() : __item(0) { }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_xsd__decimal_
#define SOAP_TYPE_xsd__decimal_ (30)
/* Primitive xsd:decimal schema type: */
class SOAP_CMAC xsd__decimal_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_xsd__decimal_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__decimal_()  { }
	virtual ~xsd__decimal_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (31)
/* Primitive xsd:double schema type: */
class SOAP_CMAC xsd__double : public xsd__anyType
{
public:
	double __item;
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_xsd__double */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__double() : __item(0) { }
	virtual ~xsd__double() { }
};
#endif

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (34)
/* Primitive xsd:duration schema type: */
class SOAP_CMAC xsd__duration_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_xsd__duration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__duration_()  { }
	virtual ~xsd__duration_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (35)
/* Primitive xsd:float schema type: */
class SOAP_CMAC xsd__float : public xsd__anyType
{
public:
	float __item;
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_xsd__float */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__float() : __item(0) { }
	virtual ~xsd__float() { }
};
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (37)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() : __item(0) { }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (38)
/* Primitive xsd:long schema type: */
class SOAP_CMAC xsd__long : public xsd__anyType
{
public:
	LONG64 __item;
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_xsd__long */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__long() : __item(0) { }
	virtual ~xsd__long() { }
};
#endif

#ifndef SOAP_TYPE_xsd__short
#define SOAP_TYPE_xsd__short (40)
/* Primitive xsd:short schema type: */
class SOAP_CMAC xsd__short : public xsd__anyType
{
public:
	short __item;
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_xsd__short */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__short() : __item(0) { }
	virtual ~xsd__short() { }
};
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (42)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string()  { }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (43)
/* Primitive xsd:unsignedByte schema type: */
class SOAP_CMAC xsd__unsignedByte : public xsd__anyType
{
public:
	unsigned char __item;
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_xsd__unsignedByte */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedByte() : __item(0) { }
	virtual ~xsd__unsignedByte() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt
#define SOAP_TYPE_xsd__unsignedInt (44)
/* Primitive xsd:unsignedInt schema type: */
class SOAP_CMAC xsd__unsignedInt : public xsd__anyType
{
public:
	unsigned int __item;
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_xsd__unsignedInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedInt() : __item(0) { }
	virtual ~xsd__unsignedInt() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedLong
#define SOAP_TYPE_xsd__unsignedLong (45)
/* Primitive xsd:unsignedLong schema type: */
class SOAP_CMAC xsd__unsignedLong : public xsd__anyType
{
public:
	ULONG64 __item;
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_xsd__unsignedLong */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedLong() : __item(0) { }
	virtual ~xsd__unsignedLong() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedShort
#define SOAP_TYPE_xsd__unsignedShort (47)
/* Primitive xsd:unsignedShort schema type: */
class SOAP_CMAC xsd__unsignedShort : public xsd__anyType
{
public:
	unsigned short __item;
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_xsd__unsignedShort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedShort() : __item(0) { }
	virtual ~xsd__unsignedShort() { }
};
#endif

#ifndef SOAP_TYPE_ns3__char__
#define SOAP_TYPE_ns3__char__ (62)
/* Primitive ns3:char schema type: */
class SOAP_CMAC ns3__char__ : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_ns3__char__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__char__() : __item(0) { }
	virtual ~ns3__char__() { }
};
#endif

#ifndef SOAP_TYPE_ns3__duration__
#define SOAP_TYPE_ns3__duration__ (64)
/* Primitive ns3:duration schema type: */
class SOAP_CMAC ns3__duration__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ns3__duration__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__duration__()  { }
	virtual ~ns3__duration__() { }
};
#endif

#ifndef SOAP_TYPE_ns3__guid__
#define SOAP_TYPE_ns3__guid__ (66)
/* Primitive ns3:guid schema type: */
class SOAP_CMAC ns3__guid__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_ns3__guid__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__guid__()  { }
	virtual ~ns3__guid__() { }
};
#endif

#ifndef SOAP_TYPE_ns4__MachineType_
#define SOAP_TYPE_ns4__MachineType_ (68)
/* Primitive ns4:MachineType schema type: */
class SOAP_CMAC ns4__MachineType_ : public xsd__anyType
{
public:
	enum ns4__MachineType __item;
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_ns4__MachineType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__MachineType_() : __item((enum ns4__MachineType)0) { }
	virtual ~ns4__MachineType_() { }
};
#endif

#ifndef SOAP_TYPE_ns4__EILCommandStatus_
#define SOAP_TYPE_ns4__EILCommandStatus_ (70)
/* Primitive ns4:EILCommandStatus schema type: */
class SOAP_CMAC ns4__EILCommandStatus_ : public xsd__anyType
{
public:
	enum ns4__EILCommandStatus __item;
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_ns4__EILCommandStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__EILCommandStatus_() : __item((enum ns4__EILCommandStatus)0) { }
	virtual ~ns4__EILCommandStatus_() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetCommandToExecute
#define SOAP_TYPE__ns1__GetCommandToExecute (49)
/* ns1:GetCommandToExecute */
class SOAP_CMAC _ns1__GetCommandToExecute
{
public:
	class ns4__MachineContext *ctx;	/* optional element of type ns4:MachineContext */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE__ns1__GetCommandToExecute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetCommandToExecute() : ctx(NULL), soap(NULL) { }
	virtual ~_ns1__GetCommandToExecute() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetCommandToExecuteResponse
#define SOAP_TYPE__ns1__GetCommandToExecuteResponse (50)
/* ns1:GetCommandToExecuteResponse */
class SOAP_CMAC _ns1__GetCommandToExecuteResponse
{
public:
	class ns4__EILCommand *GetCommandToExecuteResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:EILCommand */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE__ns1__GetCommandToExecuteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetCommandToExecuteResponse() : GetCommandToExecuteResult(NULL), soap(NULL) { }
	virtual ~_ns1__GetCommandToExecuteResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateCommandStatus
#define SOAP_TYPE__ns1__UpdateCommandStatus (51)
/* ns1:UpdateCommandStatus */
class SOAP_CMAC _ns1__UpdateCommandStatus
{
public:
	ns4__MachineContext *ctx;	/* optional element of type ns4:MachineContext */
	ns4__EILCommand *cmd;	/* optional element of type ns4:EILCommand */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE__ns1__UpdateCommandStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateCommandStatus() : ctx(NULL), cmd(NULL), soap(NULL) { }
	virtual ~_ns1__UpdateCommandStatus() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateCommandStatusResponse
#define SOAP_TYPE__ns1__UpdateCommandStatusResponse (52)
/* ns1:UpdateCommandStatusResponse */
class SOAP_CMAC _ns1__UpdateCommandStatusResponse
{
public:
	bool *UpdateCommandStatusResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE__ns1__UpdateCommandStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateCommandStatusResponse() : UpdateCommandStatusResult(NULL), soap(NULL) { }
	virtual ~_ns1__UpdateCommandStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetCommandStatus
#define SOAP_TYPE__ns1__GetCommandStatus (53)
/* ns1:GetCommandStatus */
class SOAP_CMAC _ns1__GetCommandStatus
{
public:
	ns4__MachineContext *ctx;	/* optional element of type ns4:MachineContext */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE__ns1__GetCommandStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetCommandStatus() : ctx(NULL), soap(NULL) { }
	virtual ~_ns1__GetCommandStatus() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetCommandStatusResponse
#define SOAP_TYPE__ns1__GetCommandStatusResponse (54)
/* ns1:GetCommandStatusResponse */
class SOAP_CMAC _ns1__GetCommandStatusResponse
{
public:
	ns4__MachineContext *GetCommandStatusResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:MachineContext */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE__ns1__GetCommandStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetCommandStatusResponse() : GetCommandStatusResult(NULL), soap(NULL) { }
	virtual ~_ns1__GetCommandStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InitiateClientCommands
#define SOAP_TYPE__ns1__InitiateClientCommands (55)
/* ns1:InitiateClientCommands */
class SOAP_CMAC _ns1__InitiateClientCommands
{
public:
	ns4__MachineContext *ctx;	/* optional element of type ns4:MachineContext */
	ns4__EILCommand *cmd;	/* optional element of type ns4:EILCommand */
	std::string *ownrID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE__ns1__InitiateClientCommands */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InitiateClientCommands() : ctx(NULL), cmd(NULL), ownrID(NULL), soap(NULL) { }
	virtual ~_ns1__InitiateClientCommands() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InitiateClientCommandsResponse
#define SOAP_TYPE__ns1__InitiateClientCommandsResponse (56)
/* ns1:InitiateClientCommandsResponse */
class SOAP_CMAC _ns1__InitiateClientCommandsResponse
{
public:
	std::string *InitiateClientCommandsResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE__ns1__InitiateClientCommandsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InitiateClientCommandsResponse() : InitiateClientCommandsResult(NULL), soap(NULL) { }
	virtual ~_ns1__InitiateClientCommandsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__MachineContext
#define SOAP_TYPE_ns4__MachineContext (57)
/* ns4:MachineContext */
class SOAP_CMAC ns4__MachineContext : public xsd__anyType
{
public:
	class ns5__ArrayOfstring *mContext;	/* optional element of type ns5:ArrayOfstring */
	ns5__ArrayOfstring *mList;	/* optional element of type ns5:ArrayOfstring */
	class ns5__ArrayOfKeyValueOfstringstring *mParams;	/* optional element of type ns5:ArrayOfKeyValueOfstringstring */
	enum ns4__MachineType *mType;	/* optional element of type ns4:MachineType */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_ns4__MachineContext */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__MachineContext() : mContext(NULL), mList(NULL), mParams(NULL), mType(NULL) { }
	virtual ~ns4__MachineContext() { }
};
#endif

#ifndef SOAP_TYPE_ns4__EILCommand
#define SOAP_TYPE_ns4__EILCommand (58)
/* ns4:EILCommand */
class SOAP_CMAC ns4__EILCommand : public xsd__anyType
{
public:
	std::string *CommandExitMessage;	/* optional element of type xsd:string */
	std::string *CommandName;	/* optional element of type xsd:string */
	ns5__ArrayOfKeyValueOfstringstring *CommandParameters;	/* optional element of type ns5:ArrayOfKeyValueOfstringstring */
	std::string *CommandPath;	/* optional element of type xsd:string */
	std::string *CommandResult;	/* optional element of type xsd:string */
	enum ns4__EILCommandStatus *CommandStatus;	/* optional element of type ns4:EILCommandStatus */
	bool *CommandSuccessful;	/* optional element of type xsd:boolean */
	int *ErrorCode;	/* optional element of type xsd:int */
	int *ExpectedTimeOut;	/* optional element of type xsd:int */
	std::string *OperationID;	/* optional element of type xsd:string */
	std::string *SetMachineType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_ns4__EILCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__EILCommand() : CommandExitMessage(NULL), CommandName(NULL), CommandParameters(NULL), CommandPath(NULL), CommandResult(NULL), CommandStatus(NULL), CommandSuccessful(NULL), ErrorCode(NULL), ExpectedTimeOut(NULL), OperationID(NULL), SetMachineType(NULL) { }
	virtual ~ns4__EILCommand() { }
};
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfstring
#define SOAP_TYPE_ns5__ArrayOfstring (59)
/* ns5:ArrayOfstring */
class SOAP_CMAC ns5__ArrayOfstring : public xsd__anyType
{
public:
	std::vector<std::string >string;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_ns5__ArrayOfstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ArrayOfstring()  { }
	virtual ~ns5__ArrayOfstring() { }
};
#endif

#ifndef SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring
#define SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring (81)
/* ns5:ArrayOfKeyValueOfstringstring-KeyValueOfstringstring */
class SOAP_CMAC _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring
{
public:
	std::string *Key;	/* optional element of type xsd:string */
	std::string *Value;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring() : Key(NULL), Value(NULL) { }
	virtual ~_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring() { }
};
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring
#define SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring (60)
/* ns5:ArrayOfKeyValueOfstringstring */
class SOAP_CMAC ns5__ArrayOfKeyValueOfstringstring : public xsd__anyType
{
public:
	int __sizeKeyValueOfstringstring;	/* sequence of elements <KeyValueOfstringstring> */
	_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *KeyValueOfstringstring;	/* optional element of type ns5:ArrayOfKeyValueOfstringstring-KeyValueOfstringstring */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ArrayOfKeyValueOfstringstring() : __sizeKeyValueOfstringstring(0), KeyValueOfstringstring(NULL) { }
	virtual ~ns5__ArrayOfKeyValueOfstringstring() { }
};
#endif

#ifndef SOAP_TYPE___ns1__GetCommandToExecute
#define SOAP_TYPE___ns1__GetCommandToExecute (116)
/* Operation wrapper: */
struct __ns1__GetCommandToExecute
{
public:
	_ns1__GetCommandToExecute *ns1__GetCommandToExecute;	/* optional element of type ns1:GetCommandToExecute */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateCommandStatus
#define SOAP_TYPE___ns1__UpdateCommandStatus (120)
/* Operation wrapper: */
struct __ns1__UpdateCommandStatus
{
public:
	_ns1__UpdateCommandStatus *ns1__UpdateCommandStatus;	/* optional element of type ns1:UpdateCommandStatus */
};
#endif

#ifndef SOAP_TYPE___ns1__GetCommandStatus
#define SOAP_TYPE___ns1__GetCommandStatus (124)
/* Operation wrapper: */
struct __ns1__GetCommandStatus
{
public:
	_ns1__GetCommandStatus *ns1__GetCommandStatus;	/* optional element of type ns1:GetCommandStatus */
};
#endif

#ifndef SOAP_TYPE___ns1__InitiateClientCommands
#define SOAP_TYPE___ns1__InitiateClientCommands (128)
/* Operation wrapper: */
struct __ns1__InitiateClientCommands
{
public:
	_ns1__InitiateClientCommands *ns1__InitiateClientCommands;	/* optional element of type ns1:InitiateClientCommands */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (129)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (130)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (132)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (135)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (136)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_xsd__ID
#define SOAP_TYPE_xsd__ID (11)
typedef std::string xsd__ID;
#endif

#ifndef SOAP_TYPE_xsd__IDREF
#define SOAP_TYPE_xsd__IDREF (13)
typedef std::string xsd__IDREF;
#endif

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (15)
typedef std::string xsd__QName;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (17)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (29)
typedef std::string xsd__decimal;
#endif

#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (33)
typedef std::string xsd__duration;
#endif

#ifndef SOAP_TYPE_ns3__char
#define SOAP_TYPE_ns3__char (61)
typedef int ns3__char;
#endif

#ifndef SOAP_TYPE_ns3__duration
#define SOAP_TYPE_ns3__duration (63)
typedef std::string ns3__duration;
#endif

#ifndef SOAP_TYPE_ns3__guid
#define SOAP_TYPE_ns3__guid (65)
typedef std::string ns3__guid;
#endif

#ifndef SOAP_TYPE__ns3__anyType
#define SOAP_TYPE__ns3__anyType (83)
typedef xsd__anyType _ns3__anyType;
#endif

#ifndef SOAP_TYPE__ns3__anyURI
#define SOAP_TYPE__ns3__anyURI (84)
typedef std::string _ns3__anyURI;
#endif

#ifndef SOAP_TYPE__ns3__base64Binary
#define SOAP_TYPE__ns3__base64Binary (85)
typedef xsd__base64Binary _ns3__base64Binary;
#endif

#ifndef SOAP_TYPE__ns3__boolean
#define SOAP_TYPE__ns3__boolean (86)
typedef bool _ns3__boolean;
#endif

#ifndef SOAP_TYPE__ns3__byte
#define SOAP_TYPE__ns3__byte (87)
typedef char _ns3__byte;
#endif

#ifndef SOAP_TYPE__ns3__dateTime
#define SOAP_TYPE__ns3__dateTime (88)
typedef time_t _ns3__dateTime;
#endif

#ifndef SOAP_TYPE__ns3__decimal
#define SOAP_TYPE__ns3__decimal (89)
typedef std::string _ns3__decimal;
#endif

#ifndef SOAP_TYPE__ns3__double
#define SOAP_TYPE__ns3__double (90)
typedef double _ns3__double;
#endif

#ifndef SOAP_TYPE__ns3__float
#define SOAP_TYPE__ns3__float (91)
typedef float _ns3__float;
#endif

#ifndef SOAP_TYPE__ns3__int
#define SOAP_TYPE__ns3__int (92)
typedef int _ns3__int;
#endif

#ifndef SOAP_TYPE__ns3__long
#define SOAP_TYPE__ns3__long (93)
typedef LONG64 _ns3__long;
#endif

#ifndef SOAP_TYPE__ns3__QName
#define SOAP_TYPE__ns3__QName (94)
typedef std::string _ns3__QName;
#endif

#ifndef SOAP_TYPE__ns3__short
#define SOAP_TYPE__ns3__short (95)
typedef short _ns3__short;
#endif

#ifndef SOAP_TYPE__ns3__string
#define SOAP_TYPE__ns3__string (96)
typedef std::string _ns3__string;
#endif

#ifndef SOAP_TYPE__ns3__unsignedByte
#define SOAP_TYPE__ns3__unsignedByte (97)
typedef unsigned char _ns3__unsignedByte;
#endif

#ifndef SOAP_TYPE__ns3__unsignedInt
#define SOAP_TYPE__ns3__unsignedInt (98)
typedef unsigned int _ns3__unsignedInt;
#endif

#ifndef SOAP_TYPE__ns3__unsignedLong
#define SOAP_TYPE__ns3__unsignedLong (99)
typedef ULONG64 _ns3__unsignedLong;
#endif

#ifndef SOAP_TYPE__ns3__unsignedShort
#define SOAP_TYPE__ns3__unsignedShort (100)
typedef unsigned short _ns3__unsignedShort;
#endif

#ifndef SOAP_TYPE__ns3__char
#define SOAP_TYPE__ns3__char (101)
typedef int _ns3__char;
#endif

#ifndef SOAP_TYPE__ns3__duration
#define SOAP_TYPE__ns3__duration (102)
typedef std::string _ns3__duration;
#endif

#ifndef SOAP_TYPE__ns3__guid
#define SOAP_TYPE__ns3__guid (103)
typedef std::string _ns3__guid;
#endif

#ifndef SOAP_TYPE__ns3__FactoryType
#define SOAP_TYPE__ns3__FactoryType (104)
typedef std::string _ns3__FactoryType;
#endif

#ifndef SOAP_TYPE__ns3__Id
#define SOAP_TYPE__ns3__Id (105)
typedef std::string _ns3__Id;
#endif

#ifndef SOAP_TYPE__ns3__Ref
#define SOAP_TYPE__ns3__Ref (106)
typedef std::string _ns3__Ref;
#endif

#ifndef SOAP_TYPE__ns4__MachineContext
#define SOAP_TYPE__ns4__MachineContext (107)
typedef ns4__MachineContext _ns4__MachineContext;
#endif

#ifndef SOAP_TYPE__ns4__MachineType
#define SOAP_TYPE__ns4__MachineType (108)
typedef enum ns4__MachineType _ns4__MachineType;
#endif

#ifndef SOAP_TYPE__ns4__EILCommand
#define SOAP_TYPE__ns4__EILCommand (109)
typedef ns4__EILCommand _ns4__EILCommand;
#endif

#ifndef SOAP_TYPE__ns4__EILCommandStatus
#define SOAP_TYPE__ns4__EILCommandStatus (110)
typedef enum ns4__EILCommandStatus _ns4__EILCommandStatus;
#endif

#ifndef SOAP_TYPE__ns5__ArrayOfstring
#define SOAP_TYPE__ns5__ArrayOfstring (111)
typedef ns5__ArrayOfstring _ns5__ArrayOfstring;
#endif

#ifndef SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring
#define SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring (112)
typedef ns5__ArrayOfKeyValueOfstringstring _ns5__ArrayOfKeyValueOfstringstring;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
