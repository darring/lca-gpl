/* soapStub.h
   Generated by gSOAP 2.8.0 from EILClientOps.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/Imports"
#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
#define SOAP_NAMESPACE_OF_ns3	"http://schemas.microsoft.com/2003/10/Serialization/"
#define SOAP_NAMESPACE_OF_ns4	"http://schemas.datacontract.org/2004/07/EILClientManagmentService"
#define SOAP_NAMESPACE_OF_ns5	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
#define SOAP_WSA_2005
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns4__MachineType
#define SOAP_TYPE_ns4__MachineType (74)
/* ns4:MachineType */
enum ns4__MachineType {ns4__MachineType__ANY = 0, ns4__MachineType__HOST_USCOREWILDCARD = 1, ns4__MachineType__HOST = 2, ns4__MachineType__FQDN = 3, ns4__MachineType__UUID = 4, ns4__MachineType__COLLECTION = 5};
#endif

#ifndef SOAP_TYPE_ns4__EILCommandStatus
#define SOAP_TYPE_ns4__EILCommandStatus (76)
/* ns4:EILCommandStatus */
enum ns4__EILCommandStatus {ns4__EILCommandStatus__COMMAND_USCOREISSUED = 0, ns4__EILCommandStatus__COMMAND_USCORERECEIVED = 1, ns4__EILCommandStatus__COMMAND_USCOREEXECUTION_USCORESTARTED = 2, ns4__EILCommandStatus__COMMAND_USCOREEXECUTION_USCORECOMPLETE = 3, ns4__EILCommandStatus__COMMAND_USCOREFAILED = 4, ns4__EILCommandStatus__WAIT_USCOREFOR_USCOREMANUAL_USCORESTEP = 5, ns4__EILCommandStatus__COMMAND_USCORETIMED_USCOREOUT = 6, ns4__EILCommandStatus__COMMAND_USCOREDELAYED_USCORERESPONSE = 7, ns4__EILCommandStatus__COMMAND_USCORERETRY = 8};
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (158)
/* wsa5:RelationshipType */
enum wsa5__RelationshipType {http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply = 0};
typedef enum wsa5__RelationshipType wsa5__RelationshipType;
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (159)
/* wsa5:FaultCodesType */
enum wsa5__FaultCodesType {wsa5__InvalidAddressingHeader = 0, wsa5__InvalidAddress = 1, wsa5__InvalidEPR = 2, wsa5__InvalidCardinality = 3, wsa5__MissingAddressInEPR = 4, wsa5__DuplicateMessageID = 5, wsa5__ActionMismatch = 6, wsa5__MessageAddressingHeaderRequired = 7, wsa5__DestinationUnreachable = 8, wsa5__ActionNotSupported = 9, wsa5__EndpointUnavailable = 10};
typedef enum wsa5__FaultCodesType wsa5__FaultCodesType;
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (177)
/* wsa5:IsReferenceParameter */
enum _wsa5__IsReferenceParameter {wsa5__false = 0, wsa5__true = 1};
typedef enum _wsa5__IsReferenceParameter _wsa5__IsReferenceParameter;
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (7)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType(): __item(NULL), soap(NULL) { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__ID_
#define SOAP_TYPE_xsd__ID_ (10)
/* Primitive xsd:ID schema type: */
class SOAP_CMAC xsd__ID_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_xsd__ID_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__ID_(): __item(NULL) { xsd__ID_::soap_default(NULL); }
	virtual ~xsd__ID_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__IDREF_
#define SOAP_TYPE_xsd__IDREF_ (12)
/* Primitive xsd:IDREF schema type: */
class SOAP_CMAC xsd__IDREF_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_xsd__IDREF_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__IDREF_(): __item(NULL) { xsd__IDREF_::soap_default(NULL); }
	virtual ~xsd__IDREF_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (13)
/* Primitive xsd:QName schema type: */
class SOAP_CMAC xsd__QName : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_xsd__QName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__QName(): __item(NULL) { xsd__QName::soap_default(NULL); }
	virtual ~xsd__QName() { }
};
#endif

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (15)
/* Primitive xsd:anyURI schema type: */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_xsd__anyURI_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyURI_(): __item(NULL) { xsd__anyURI_::soap_default(NULL); }
	virtual ~xsd__anyURI_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (16)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary(): __ptr(NULL), id(NULL), type(NULL), options(NULL), soap(NULL) { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (20)
/* Primitive xsd:base64Binary schema type: */
class SOAP_CMAC xsd__base64Binary_ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_xsd__base64Binary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary_() { xsd__base64Binary_::soap_default(NULL); }
	virtual ~xsd__base64Binary_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (21)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() { xsd__boolean::soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_xsd__byte_
#define SOAP_TYPE_xsd__byte_ (24)
/* Primitive xsd:byte schema type: */
class SOAP_CMAC xsd__byte_ : public xsd__anyType
{
public:
	char __item;
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_xsd__byte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__byte_() { xsd__byte_::soap_default(NULL); }
	virtual ~xsd__byte_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (25)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() { xsd__dateTime::soap_default(NULL); }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_xsd__decimal_
#define SOAP_TYPE_xsd__decimal_ (28)
/* Primitive xsd:decimal schema type: */
class SOAP_CMAC xsd__decimal_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_xsd__decimal_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__decimal_(): __item(NULL) { xsd__decimal_::soap_default(NULL); }
	virtual ~xsd__decimal_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (29)
/* Primitive xsd:double schema type: */
class SOAP_CMAC xsd__double : public xsd__anyType
{
public:
	double __item;
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_xsd__double */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__double() { xsd__double::soap_default(NULL); }
	virtual ~xsd__double() { }
};
#endif

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (32)
/* Primitive xsd:duration schema type: */
class SOAP_CMAC xsd__duration_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_xsd__duration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__duration_(): __item(NULL) { xsd__duration_::soap_default(NULL); }
	virtual ~xsd__duration_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (33)
/* Primitive xsd:float schema type: */
class SOAP_CMAC xsd__float : public xsd__anyType
{
public:
	float __item;
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_xsd__float */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__float() { xsd__float::soap_default(NULL); }
	virtual ~xsd__float() { }
};
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (35)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() { xsd__int::soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (36)
/* Primitive xsd:long schema type: */
class SOAP_CMAC xsd__long : public xsd__anyType
{
public:
	LONG64 __item;
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_xsd__long */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__long() { xsd__long::soap_default(NULL); }
	virtual ~xsd__long() { }
};
#endif

#ifndef SOAP_TYPE_xsd__short
#define SOAP_TYPE_xsd__short (38)
/* Primitive xsd:short schema type: */
class SOAP_CMAC xsd__short : public xsd__anyType
{
public:
	short __item;
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_xsd__short */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__short() { xsd__short::soap_default(NULL); }
	virtual ~xsd__short() { }
};
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (40)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string(): __item(NULL) { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte_
#define SOAP_TYPE_xsd__unsignedByte_ (42)
/* Primitive xsd:unsignedByte schema type: */
class SOAP_CMAC xsd__unsignedByte_ : public xsd__anyType
{
public:
	unsigned char __item;
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_xsd__unsignedByte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedByte_() { xsd__unsignedByte_::soap_default(NULL); }
	virtual ~xsd__unsignedByte_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt
#define SOAP_TYPE_xsd__unsignedInt (43)
/* Primitive xsd:unsignedInt schema type: */
class SOAP_CMAC xsd__unsignedInt : public xsd__anyType
{
public:
	unsigned int __item;
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_xsd__unsignedInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedInt() { xsd__unsignedInt::soap_default(NULL); }
	virtual ~xsd__unsignedInt() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedLong
#define SOAP_TYPE_xsd__unsignedLong (44)
/* Primitive xsd:unsignedLong schema type: */
class SOAP_CMAC xsd__unsignedLong : public xsd__anyType
{
public:
	ULONG64 __item;
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_xsd__unsignedLong */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedLong() { xsd__unsignedLong::soap_default(NULL); }
	virtual ~xsd__unsignedLong() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedShort
#define SOAP_TYPE_xsd__unsignedShort (46)
/* Primitive xsd:unsignedShort schema type: */
class SOAP_CMAC xsd__unsignedShort : public xsd__anyType
{
public:
	unsigned short __item;
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_xsd__unsignedShort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedShort() { xsd__unsignedShort::soap_default(NULL); }
	virtual ~xsd__unsignedShort() { }
};
#endif

#ifndef SOAP_TYPE_ns3__char__
#define SOAP_TYPE_ns3__char__ (69)
/* Primitive ns3:char schema type: */
class SOAP_CMAC ns3__char__ : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_ns3__char__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__char__() { ns3__char__::soap_default(NULL); }
	virtual ~ns3__char__() { }
};
#endif

#ifndef SOAP_TYPE_ns3__duration__
#define SOAP_TYPE_ns3__duration__ (71)
/* Primitive ns3:duration schema type: */
class SOAP_CMAC ns3__duration__ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_ns3__duration__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__duration__(): __item(NULL) { ns3__duration__::soap_default(NULL); }
	virtual ~ns3__duration__() { }
};
#endif

#ifndef SOAP_TYPE_ns3__guid__
#define SOAP_TYPE_ns3__guid__ (73)
/* Primitive ns3:guid schema type: */
class SOAP_CMAC ns3__guid__ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_ns3__guid__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__guid__(): __item(NULL) { ns3__guid__::soap_default(NULL); }
	virtual ~ns3__guid__() { }
};
#endif

#ifndef SOAP_TYPE_ns4__MachineType_
#define SOAP_TYPE_ns4__MachineType_ (75)
/* Primitive ns4:MachineType schema type: */
class SOAP_CMAC ns4__MachineType_ : public xsd__anyType
{
public:
	enum ns4__MachineType __item;
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_ns4__MachineType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__MachineType_() { ns4__MachineType_::soap_default(NULL); }
	virtual ~ns4__MachineType_() { }
};
#endif

#ifndef SOAP_TYPE_ns4__EILCommandStatus_
#define SOAP_TYPE_ns4__EILCommandStatus_ (77)
/* Primitive ns4:EILCommandStatus schema type: */
class SOAP_CMAC ns4__EILCommandStatus_ : public xsd__anyType
{
public:
	enum ns4__EILCommandStatus __item;
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_ns4__EILCommandStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__EILCommandStatus_() { ns4__EILCommandStatus_::soap_default(NULL); }
	virtual ~ns4__EILCommandStatus_() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetCommandToExecute
#define SOAP_TYPE__ns1__GetCommandToExecute (48)
/* ns1:GetCommandToExecute */
class SOAP_CMAC _ns1__GetCommandToExecute
{
public:
	class ns4__MachineContext *ctx;	/* optional element of type ns4:MachineContext */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE__ns1__GetCommandToExecute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetCommandToExecute(): ctx(NULL), soap(NULL) { _ns1__GetCommandToExecute::soap_default(NULL); }
	virtual ~_ns1__GetCommandToExecute() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetCommandToExecuteResponse
#define SOAP_TYPE__ns1__GetCommandToExecuteResponse (49)
/* ns1:GetCommandToExecuteResponse */
class SOAP_CMAC _ns1__GetCommandToExecuteResponse
{
public:
	class ns4__EILCommand *GetCommandToExecuteResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:EILCommand */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE__ns1__GetCommandToExecuteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetCommandToExecuteResponse(): GetCommandToExecuteResult(NULL), soap(NULL) { _ns1__GetCommandToExecuteResponse::soap_default(NULL); }
	virtual ~_ns1__GetCommandToExecuteResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetCommandToExecuteUsingMacAddress
#define SOAP_TYPE__ns1__GetCommandToExecuteUsingMacAddress (50)
/* ns1:GetCommandToExecuteUsingMacAddress */
class SOAP_CMAC _ns1__GetCommandToExecuteUsingMacAddress
{
public:
	ns4__MachineContext *ctx;	/* optional element of type ns4:MachineContext */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE__ns1__GetCommandToExecuteUsingMacAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetCommandToExecuteUsingMacAddress(): ctx(NULL), soap(NULL) { _ns1__GetCommandToExecuteUsingMacAddress::soap_default(NULL); }
	virtual ~_ns1__GetCommandToExecuteUsingMacAddress() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetCommandToExecuteUsingMacAddressResponse
#define SOAP_TYPE__ns1__GetCommandToExecuteUsingMacAddressResponse (51)
/* ns1:GetCommandToExecuteUsingMacAddressResponse */
class SOAP_CMAC _ns1__GetCommandToExecuteUsingMacAddressResponse
{
public:
	ns4__EILCommand *GetCommandToExecuteUsingMacAddressResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:EILCommand */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE__ns1__GetCommandToExecuteUsingMacAddressResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetCommandToExecuteUsingMacAddressResponse(): GetCommandToExecuteUsingMacAddressResult(NULL), soap(NULL) { _ns1__GetCommandToExecuteUsingMacAddressResponse::soap_default(NULL); }
	virtual ~_ns1__GetCommandToExecuteUsingMacAddressResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateCommandStatus
#define SOAP_TYPE__ns1__UpdateCommandStatus (52)
/* ns1:UpdateCommandStatus */
class SOAP_CMAC _ns1__UpdateCommandStatus
{
public:
	ns4__MachineContext *ctx;	/* optional element of type ns4:MachineContext */
	ns4__EILCommand *cmd;	/* optional element of type ns4:EILCommand */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE__ns1__UpdateCommandStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateCommandStatus(): ctx(NULL), cmd(NULL), soap(NULL) { _ns1__UpdateCommandStatus::soap_default(NULL); }
	virtual ~_ns1__UpdateCommandStatus() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateCommandStatusResponse
#define SOAP_TYPE__ns1__UpdateCommandStatusResponse (53)
/* ns1:UpdateCommandStatusResponse */
class SOAP_CMAC _ns1__UpdateCommandStatusResponse
{
public:
	bool *UpdateCommandStatusResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE__ns1__UpdateCommandStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateCommandStatusResponse(): UpdateCommandStatusResult(NULL), soap(NULL) { _ns1__UpdateCommandStatusResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateCommandStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InitiateClientCommands
#define SOAP_TYPE__ns1__InitiateClientCommands (54)
/* ns1:InitiateClientCommands */
class SOAP_CMAC _ns1__InitiateClientCommands
{
public:
	ns4__MachineContext *ctx;	/* optional element of type ns4:MachineContext */
	ns4__EILCommand *cmd;	/* optional element of type ns4:EILCommand */
	char *ownrID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE__ns1__InitiateClientCommands */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InitiateClientCommands(): ctx(NULL), cmd(NULL), ownrID(NULL), soap(NULL) { _ns1__InitiateClientCommands::soap_default(NULL); }
	virtual ~_ns1__InitiateClientCommands() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InitiateClientCommandsResponse
#define SOAP_TYPE__ns1__InitiateClientCommandsResponse (55)
/* ns1:InitiateClientCommandsResponse */
class SOAP_CMAC _ns1__InitiateClientCommandsResponse
{
public:
	char *InitiateClientCommandsResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE__ns1__InitiateClientCommandsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InitiateClientCommandsResponse(): InitiateClientCommandsResult(NULL), soap(NULL) { _ns1__InitiateClientCommandsResponse::soap_default(NULL); }
	virtual ~_ns1__InitiateClientCommandsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InitiateClientCommandsUsingMac
#define SOAP_TYPE__ns1__InitiateClientCommandsUsingMac (56)
/* ns1:InitiateClientCommandsUsingMac */
class SOAP_CMAC _ns1__InitiateClientCommandsUsingMac
{
public:
	ns4__MachineContext *ctx;	/* optional element of type ns4:MachineContext */
	ns4__EILCommand *cmd;	/* optional element of type ns4:EILCommand */
	char *ownrID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE__ns1__InitiateClientCommandsUsingMac */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InitiateClientCommandsUsingMac(): ctx(NULL), cmd(NULL), ownrID(NULL), soap(NULL) { _ns1__InitiateClientCommandsUsingMac::soap_default(NULL); }
	virtual ~_ns1__InitiateClientCommandsUsingMac() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InitiateClientCommandsUsingMacResponse
#define SOAP_TYPE__ns1__InitiateClientCommandsUsingMacResponse (57)
/* ns1:InitiateClientCommandsUsingMacResponse */
class SOAP_CMAC _ns1__InitiateClientCommandsUsingMacResponse
{
public:
	char *InitiateClientCommandsUsingMacResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE__ns1__InitiateClientCommandsUsingMacResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InitiateClientCommandsUsingMacResponse(): InitiateClientCommandsUsingMacResult(NULL), soap(NULL) { _ns1__InitiateClientCommandsUsingMacResponse::soap_default(NULL); }
	virtual ~_ns1__InitiateClientCommandsUsingMacResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetRDPConnectionString
#define SOAP_TYPE__ns1__GetRDPConnectionString (58)
/* ns1:GetRDPConnectionString */
class SOAP_CMAC _ns1__GetRDPConnectionString
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE__ns1__GetRDPConnectionString */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetRDPConnectionString(): soap(NULL) { _ns1__GetRDPConnectionString::soap_default(NULL); }
	virtual ~_ns1__GetRDPConnectionString() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetRDPConnectionStringResponse
#define SOAP_TYPE__ns1__GetRDPConnectionStringResponse (59)
/* ns1:GetRDPConnectionStringResponse */
class SOAP_CMAC _ns1__GetRDPConnectionStringResponse
{
public:
	char *GetRDPConnectionStringResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE__ns1__GetRDPConnectionStringResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetRDPConnectionStringResponse(): GetRDPConnectionStringResult(NULL), soap(NULL) { _ns1__GetRDPConnectionStringResponse::soap_default(NULL); }
	virtual ~_ns1__GetRDPConnectionStringResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InitiateRDPRequest
#define SOAP_TYPE__ns1__InitiateRDPRequest (60)
/* ns1:InitiateRDPRequest */
class SOAP_CMAC _ns1__InitiateRDPRequest
{
public:
	char *envNum;	/* optional element of type xsd:string */
	char *mcName;	/* optional element of type xsd:string */
	char *macAddress;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE__ns1__InitiateRDPRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InitiateRDPRequest(): envNum(NULL), mcName(NULL), macAddress(NULL), soap(NULL) { _ns1__InitiateRDPRequest::soap_default(NULL); }
	virtual ~_ns1__InitiateRDPRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InitiateRDPRequestResponse
#define SOAP_TYPE__ns1__InitiateRDPRequestResponse (61)
/* ns1:InitiateRDPRequestResponse */
class SOAP_CMAC _ns1__InitiateRDPRequestResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE__ns1__InitiateRDPRequestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InitiateRDPRequestResponse(): soap(NULL) { _ns1__InitiateRDPRequestResponse::soap_default(NULL); }
	virtual ~_ns1__InitiateRDPRequestResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateAssetInformation
#define SOAP_TYPE__ns1__UpdateAssetInformation (62)
/* ns1:UpdateAssetInformation */
class SOAP_CMAC _ns1__UpdateAssetInformation
{
public:
	char *hostName;	/* optional element of type xsd:string */
	char *macAddr;	/* optional element of type xsd:string */
	char *xmlAssetInfo;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE__ns1__UpdateAssetInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateAssetInformation(): hostName(NULL), macAddr(NULL), xmlAssetInfo(NULL), soap(NULL) { _ns1__UpdateAssetInformation::soap_default(NULL); }
	virtual ~_ns1__UpdateAssetInformation() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateAssetInformationResponse
#define SOAP_TYPE__ns1__UpdateAssetInformationResponse (63)
/* ns1:UpdateAssetInformationResponse */
class SOAP_CMAC _ns1__UpdateAssetInformationResponse
{
public:
	bool *UpdateAssetInformationResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE__ns1__UpdateAssetInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateAssetInformationResponse(): UpdateAssetInformationResult(NULL), soap(NULL) { _ns1__UpdateAssetInformationResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateAssetInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__MachineContext
#define SOAP_TYPE_ns4__MachineContext (64)
/* ns4:MachineContext */
class SOAP_CMAC ns4__MachineContext : public xsd__anyType
{
public:
	class ns5__ArrayOfstring *mContext;	/* optional element of type ns5:ArrayOfstring */
	ns5__ArrayOfstring *mList;	/* optional element of type ns5:ArrayOfstring */
	class ns5__ArrayOfKeyValueOfstringstring *mMacs;	/* optional element of type ns5:ArrayOfKeyValueOfstringstring */
	ns5__ArrayOfKeyValueOfstringstring *mParams;	/* optional element of type ns5:ArrayOfKeyValueOfstringstring */
	enum ns4__MachineType *mType;	/* optional element of type ns4:MachineType */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ns4__MachineContext */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__MachineContext(): mContext(NULL), mList(NULL), mMacs(NULL), mParams(NULL), mType(NULL) { ns4__MachineContext::soap_default(NULL); }
	virtual ~ns4__MachineContext() { }
};
#endif

#ifndef SOAP_TYPE_ns4__EILCommand
#define SOAP_TYPE_ns4__EILCommand (65)
/* ns4:EILCommand */
class SOAP_CMAC ns4__EILCommand : public xsd__anyType
{
public:
	char *CommandExitMessage;	/* optional element of type xsd:string */
	char *CommandName;	/* optional element of type xsd:string */
	ns5__ArrayOfKeyValueOfstringstring *CommandParameters;	/* optional element of type ns5:ArrayOfKeyValueOfstringstring */
	char *CommandPath;	/* optional element of type xsd:string */
	char *CommandResult;	/* optional element of type xsd:string */
	enum ns4__EILCommandStatus *CommandStatus;	/* optional element of type ns4:EILCommandStatus */
	bool *CommandSuccessful;	/* optional element of type xsd:boolean */
	int *ErrorCode;	/* optional element of type xsd:int */
	int *ExpectedTimeOut;	/* optional element of type xsd:int */
	char *OperationID;	/* optional element of type xsd:string */
	char *SetMachineType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_ns4__EILCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__EILCommand(): CommandExitMessage(NULL), CommandName(NULL), CommandParameters(NULL), CommandPath(NULL), CommandResult(NULL), CommandStatus(NULL), CommandSuccessful(NULL), ErrorCode(NULL), ExpectedTimeOut(NULL), OperationID(NULL), SetMachineType(NULL) { ns4__EILCommand::soap_default(NULL); }
	virtual ~ns4__EILCommand() { }
};
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfstring
#define SOAP_TYPE_ns5__ArrayOfstring (66)
/* ns5:ArrayOfstring */
class SOAP_CMAC ns5__ArrayOfstring : public xsd__anyType
{
public:
	int __sizestring;	/* sequence of elements <string> */
	char **string;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_ns5__ArrayOfstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ArrayOfstring(): string(NULL) { ns5__ArrayOfstring::soap_default(NULL); }
	virtual ~ns5__ArrayOfstring() { }
};
#endif

#ifndef SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring
#define SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring (87)
/* ns5:ArrayOfKeyValueOfstringstring-KeyValueOfstringstring */
class SOAP_CMAC _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring
{
public:
	char *Key;	/* optional element of type xsd:string */
	char *Value;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(): Key(NULL), Value(NULL) { _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::soap_default(NULL); }
	virtual ~_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring() { }
};
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring
#define SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring (67)
/* ns5:ArrayOfKeyValueOfstringstring */
class SOAP_CMAC ns5__ArrayOfKeyValueOfstringstring : public xsd__anyType
{
public:
	int __sizeKeyValueOfstringstring;	/* sequence of elements <KeyValueOfstringstring> */
	_ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *KeyValueOfstringstring;	/* optional element of type ns5:ArrayOfKeyValueOfstringstring-KeyValueOfstringstring */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_ns5__ArrayOfKeyValueOfstringstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ArrayOfKeyValueOfstringstring(): KeyValueOfstringstring(NULL) { ns5__ArrayOfKeyValueOfstringstring::soap_default(NULL); }
	virtual ~ns5__ArrayOfKeyValueOfstringstring() { }
};
#endif

#ifndef SOAP_TYPE___ns1__GetCommandToExecute
#define SOAP_TYPE___ns1__GetCommandToExecute (122)
/* Operation wrapper: */
struct __ns1__GetCommandToExecute
{
public:
	_ns1__GetCommandToExecute *ns1__GetCommandToExecute;	/* optional element of type ns1:GetCommandToExecute */
};
#endif

#ifndef SOAP_TYPE___ns1__GetCommandToExecuteUsingMacAddress
#define SOAP_TYPE___ns1__GetCommandToExecuteUsingMacAddress (126)
/* Operation wrapper: */
struct __ns1__GetCommandToExecuteUsingMacAddress
{
public:
	_ns1__GetCommandToExecuteUsingMacAddress *ns1__GetCommandToExecuteUsingMacAddress;	/* optional element of type ns1:GetCommandToExecuteUsingMacAddress */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateCommandStatus
#define SOAP_TYPE___ns1__UpdateCommandStatus (130)
/* Operation wrapper: */
struct __ns1__UpdateCommandStatus
{
public:
	_ns1__UpdateCommandStatus *ns1__UpdateCommandStatus;	/* optional element of type ns1:UpdateCommandStatus */
};
#endif

#ifndef SOAP_TYPE___ns1__InitiateClientCommands
#define SOAP_TYPE___ns1__InitiateClientCommands (134)
/* Operation wrapper: */
struct __ns1__InitiateClientCommands
{
public:
	_ns1__InitiateClientCommands *ns1__InitiateClientCommands;	/* optional element of type ns1:InitiateClientCommands */
};
#endif

#ifndef SOAP_TYPE___ns1__InitiateClientCommandsUsingMac
#define SOAP_TYPE___ns1__InitiateClientCommandsUsingMac (138)
/* Operation wrapper: */
struct __ns1__InitiateClientCommandsUsingMac
{
public:
	_ns1__InitiateClientCommandsUsingMac *ns1__InitiateClientCommandsUsingMac;	/* optional element of type ns1:InitiateClientCommandsUsingMac */
};
#endif

#ifndef SOAP_TYPE___ns1__GetRDPConnectionString
#define SOAP_TYPE___ns1__GetRDPConnectionString (142)
/* Operation wrapper: */
struct __ns1__GetRDPConnectionString
{
public:
	_ns1__GetRDPConnectionString *ns1__GetRDPConnectionString;	/* optional element of type ns1:GetRDPConnectionString */
};
#endif

#ifndef SOAP_TYPE___ns1__InitiateRDPRequest
#define SOAP_TYPE___ns1__InitiateRDPRequest (146)
/* Operation wrapper: */
struct __ns1__InitiateRDPRequest
{
public:
	_ns1__InitiateRDPRequest *ns1__InitiateRDPRequest;	/* optional element of type ns1:InitiateRDPRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateAssetInformation
#define SOAP_TYPE___ns1__UpdateAssetInformation (150)
/* Operation wrapper: */
struct __ns1__UpdateAssetInformation
{
public:
	_ns1__UpdateAssetInformation *ns1__UpdateAssetInformation;	/* optional element of type ns1:UpdateAssetInformation */
};
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (151)
/* wsa5:EndpointReferenceType */
struct wsa5__EndpointReferenceType
{
public:
	char *Address;	/* required element of type xsd:string */
	struct wsa5__ReferenceParametersType *ReferenceParameters;	/* optional element of type wsa5:ReferenceParametersType */
	struct wsa5__MetadataType *Metadata;	/* optional element of type wsa5:MetadataType */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa5__EndpointReferenceType wsa5__EndpointReferenceType;
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (152)
/* wsa5:ReferenceParametersType */
struct wsa5__ReferenceParametersType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa5__ReferenceParametersType wsa5__ReferenceParametersType;
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (153)
/* wsa5:MetadataType */
struct wsa5__MetadataType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa5__MetadataType wsa5__MetadataType;
#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (155)
/* wsa5:ProblemActionType */
struct wsa5__ProblemActionType
{
public:
	char *Action;	/* optional element of type xsd:string */
	char *SoapAction;	/* optional element of type xsd:string */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa5__ProblemActionType wsa5__ProblemActionType;
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (154)
/* Primitive wsa5:RelatesToType schema type: */
struct wsa5__RelatesToType
{
public:
	char *__item;
	char *RelationshipType;	/* optional attribute of type wsa5:RelationshipTypeOpenEnum */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa5__RelatesToType wsa5__RelatesToType;
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (178)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	char *wsa5__MessageID;	/* optional element of type wsa5:MessageID */
	struct wsa5__RelatesToType *wsa5__RelatesTo;	/* optional element of type wsa5:RelatesTo */
	struct wsa5__EndpointReferenceType *wsa5__From;	/* optional element of type wsa5:From */
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo;	/* mustUnderstand */
	struct wsa5__EndpointReferenceType *wsa5__FaultTo;	/* mustUnderstand */
	char *wsa5__To;	/* mustUnderstand */
	char *wsa5__Action;	/* mustUnderstand */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (183)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (185)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (188)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (189)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__ID
#define SOAP_TYPE_xsd__ID (9)
typedef char *xsd__ID;
#endif

#ifndef SOAP_TYPE_xsd__IDREF
#define SOAP_TYPE_xsd__IDREF (11)
typedef char *xsd__IDREF;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (14)
typedef char *xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (23)
typedef char xsd__byte;
#endif

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (27)
typedef char *xsd__decimal;
#endif

#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (31)
typedef char *xsd__duration;
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (41)
typedef unsigned char xsd__unsignedByte;
#endif

#ifndef SOAP_TYPE_ns3__char
#define SOAP_TYPE_ns3__char (68)
typedef int ns3__char;
#endif

#ifndef SOAP_TYPE_ns3__duration
#define SOAP_TYPE_ns3__duration (70)
typedef char *ns3__duration;
#endif

#ifndef SOAP_TYPE_ns3__guid
#define SOAP_TYPE_ns3__guid (72)
typedef char *ns3__guid;
#endif

#ifndef SOAP_TYPE__ns3__anyType
#define SOAP_TYPE__ns3__anyType (89)
typedef xsd__anyType _ns3__anyType;
#endif

#ifndef SOAP_TYPE__ns3__anyURI
#define SOAP_TYPE__ns3__anyURI (90)
typedef char *_ns3__anyURI;
#endif

#ifndef SOAP_TYPE__ns3__base64Binary
#define SOAP_TYPE__ns3__base64Binary (91)
typedef xsd__base64Binary _ns3__base64Binary;
#endif

#ifndef SOAP_TYPE__ns3__boolean
#define SOAP_TYPE__ns3__boolean (92)
typedef bool _ns3__boolean;
#endif

#ifndef SOAP_TYPE__ns3__byte
#define SOAP_TYPE__ns3__byte (93)
typedef char _ns3__byte;
#endif

#ifndef SOAP_TYPE__ns3__dateTime
#define SOAP_TYPE__ns3__dateTime (94)
typedef time_t _ns3__dateTime;
#endif

#ifndef SOAP_TYPE__ns3__decimal
#define SOAP_TYPE__ns3__decimal (95)
typedef char *_ns3__decimal;
#endif

#ifndef SOAP_TYPE__ns3__double
#define SOAP_TYPE__ns3__double (96)
typedef double _ns3__double;
#endif

#ifndef SOAP_TYPE__ns3__float
#define SOAP_TYPE__ns3__float (97)
typedef float _ns3__float;
#endif

#ifndef SOAP_TYPE__ns3__int
#define SOAP_TYPE__ns3__int (98)
typedef int _ns3__int;
#endif

#ifndef SOAP_TYPE__ns3__long
#define SOAP_TYPE__ns3__long (99)
typedef LONG64 _ns3__long;
#endif

#ifndef SOAP_TYPE__ns3__QName
#define SOAP_TYPE__ns3__QName (100)
typedef char *_ns3__QName;
#endif

#ifndef SOAP_TYPE__ns3__short
#define SOAP_TYPE__ns3__short (101)
typedef short _ns3__short;
#endif

#ifndef SOAP_TYPE__ns3__string
#define SOAP_TYPE__ns3__string (102)
typedef char *_ns3__string;
#endif

#ifndef SOAP_TYPE__ns3__unsignedByte
#define SOAP_TYPE__ns3__unsignedByte (103)
typedef unsigned char _ns3__unsignedByte;
#endif

#ifndef SOAP_TYPE__ns3__unsignedInt
#define SOAP_TYPE__ns3__unsignedInt (104)
typedef unsigned int _ns3__unsignedInt;
#endif

#ifndef SOAP_TYPE__ns3__unsignedLong
#define SOAP_TYPE__ns3__unsignedLong (105)
typedef ULONG64 _ns3__unsignedLong;
#endif

#ifndef SOAP_TYPE__ns3__unsignedShort
#define SOAP_TYPE__ns3__unsignedShort (106)
typedef unsigned short _ns3__unsignedShort;
#endif

#ifndef SOAP_TYPE__ns3__char
#define SOAP_TYPE__ns3__char (107)
typedef int _ns3__char;
#endif

#ifndef SOAP_TYPE__ns3__duration
#define SOAP_TYPE__ns3__duration (108)
typedef char *_ns3__duration;
#endif

#ifndef SOAP_TYPE__ns3__guid
#define SOAP_TYPE__ns3__guid (109)
typedef char *_ns3__guid;
#endif

#ifndef SOAP_TYPE__ns3__FactoryType
#define SOAP_TYPE__ns3__FactoryType (110)
typedef char *_ns3__FactoryType;
#endif

#ifndef SOAP_TYPE__ns3__Id
#define SOAP_TYPE__ns3__Id (111)
typedef char *_ns3__Id;
#endif

#ifndef SOAP_TYPE__ns3__Ref
#define SOAP_TYPE__ns3__Ref (112)
typedef char *_ns3__Ref;
#endif

#ifndef SOAP_TYPE__ns4__MachineContext
#define SOAP_TYPE__ns4__MachineContext (113)
typedef ns4__MachineContext _ns4__MachineContext;
#endif

#ifndef SOAP_TYPE__ns4__MachineType
#define SOAP_TYPE__ns4__MachineType (114)
typedef enum ns4__MachineType _ns4__MachineType;
#endif

#ifndef SOAP_TYPE__ns4__EILCommand
#define SOAP_TYPE__ns4__EILCommand (115)
typedef ns4__EILCommand _ns4__EILCommand;
#endif

#ifndef SOAP_TYPE__ns4__EILCommandStatus
#define SOAP_TYPE__ns4__EILCommandStatus (116)
typedef enum ns4__EILCommandStatus _ns4__EILCommandStatus;
#endif

#ifndef SOAP_TYPE__ns5__ArrayOfstring
#define SOAP_TYPE__ns5__ArrayOfstring (117)
typedef ns5__ArrayOfstring _ns5__ArrayOfstring;
#endif

#ifndef SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring
#define SOAP_TYPE__ns5__ArrayOfKeyValueOfstringstring (118)
typedef ns5__ArrayOfKeyValueOfstringstring _ns5__ArrayOfKeyValueOfstringstring;
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (156)
typedef char *wsa5__RelationshipTypeOpenEnum;
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (157)
typedef char *wsa5__FaultCodesOpenEnumType;
#endif

#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (163)
typedef struct wsa5__EndpointReferenceType _wsa5__EndpointReference;
#endif

#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (164)
typedef struct wsa5__ReferenceParametersType _wsa5__ReferenceParameters;
#endif

#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (165)
typedef struct wsa5__MetadataType _wsa5__Metadata;
#endif

#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (166)
typedef char *_wsa5__MessageID;
#endif

#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (167)
typedef struct wsa5__RelatesToType _wsa5__RelatesTo;
#endif

#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (168)
typedef struct wsa5__EndpointReferenceType _wsa5__ReplyTo;
#endif

#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (169)
typedef struct wsa5__EndpointReferenceType _wsa5__From;
#endif

#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (170)
typedef struct wsa5__EndpointReferenceType _wsa5__FaultTo;
#endif

#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (171)
typedef char *_wsa5__To;
#endif

#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (172)
typedef char *_wsa5__Action;
#endif

#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (173)
typedef ULONG64 _wsa5__RetryAfter;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (174)
typedef char *_wsa5__ProblemHeaderQName;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (175)
typedef char *_wsa5__ProblemIRI;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (176)
typedef struct wsa5__ProblemActionType _wsa5__ProblemAction;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
