/* EILClientOps.h
   Generated by wsdl2h 2.8.0 from http://172.16.3.10/CCMS/EILClientOperationsService.svc?wsdl and typemap.dat
   2010-12-01 22:43:24 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on EILClientOps.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/

// This service uses SOAP 1.2 namespaces:
//gsoap SOAP-ENV schema namespace:	http://www.w3.org/2003/05/soap-envelope
//gsoap SOAP-ENC schema namespace:	http://www.w3.org/2003/05/soap-encoding

/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://tempuri.org/"
ns2 = "http://tempuri.org/Imports"
ns3 = "http://schemas.microsoft.com/2003/10/Serialization/"
ns4 = "http://schemas.datacontract.org/2004/07/EILClientManagmentService"
ns5 = "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/Imports"
//gsoap ns2   schema namespace:	http://tempuri.org/Imports
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://schemas.microsoft.com/2003/10/Serialization/"
//gsoap ns3   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/
//gsoap ns3   schema form:	qualified

#define SOAP_NAMESPACE_OF_ns4	"http://schemas.datacontract.org/2004/07/EILClientManagmentService"
//gsoap ns4   schema namespace:	http://schemas.datacontract.org/2004/07/EILClientManagmentService
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns5	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
//gsoap ns5   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/Arrays
//gsoap ns5   schema elementForm:	qualified
//gsoap ns5   schema attributeForm:	unqualified
class xsd__anyType { _XML __item; struct soap *soap; };

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:ID"
typedef char* xsd__ID;

/// Class wrapper for built-in type "xs:ID" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__ID_ to check runtime type (see soapStub.h)
class xsd__ID_ : public xsd__anyType
{ public:
    xsd__ID                              __item;                       
};

/// Primitive built-in type "xs:IDREF"
typedef char* xsd__IDREF;

/// Class wrapper for built-in type "xs:IDREF" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__IDREF_ to check runtime type (see soapStub.h)
class xsd__IDREF_ : public xsd__anyType
{ public:
    xsd__IDREF                           __item;                       
};

/// Class wrapper for built-in type "xs:QName" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__QName to check runtime type (see soapStub.h)
class xsd__QName : public xsd__anyType
{ public:
    _QName                               __item;                       
};

/// Primitive built-in type "xs:anyURI"
typedef char* xsd__anyURI;

/// Class wrapper for built-in type "xs:anyURI" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__anyURI_ to check runtime type (see soapStub.h)
class xsd__anyURI_ : public xsd__anyType
{ public:
    xsd__anyURI                          __item;                       
};

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};

/// Class wrapper for built-in type "xs:base64Binary" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__base64Binary_ to check runtime type (see soapStub.h)
class xsd__base64Binary_ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item;                       
};

/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__boolean to check runtime type (see soapStub.h)
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Built-in type "xs:byte".
typedef char xsd__byte;

/// Class wrapper for built-in type "xs:byte" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__byte_ to check runtime type (see soapStub.h)
class xsd__byte_ : public xsd__anyType
{ public:
    xsd__byte                            __item;                       
};

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__dateTime to check runtime type (see soapStub.h)
class xsd__dateTime : public xsd__anyType
{ public:
    time_t                               __item;                       
};

/// Primitive built-in type "xs:decimal"
typedef char* xsd__decimal;

/// Class wrapper for built-in type "xs:decimal" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__decimal_ to check runtime type (see soapStub.h)
class xsd__decimal_ : public xsd__anyType
{ public:
    xsd__decimal                         __item;                       
};

/// Class wrapper for built-in type "xs:double" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__double to check runtime type (see soapStub.h)
class xsd__double : public xsd__anyType
{ public:
    double                               __item;                       
};

/// Primitive built-in type "xs:duration"
typedef char* xsd__duration;

/// Class wrapper for built-in type "xs:duration" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__duration_ to check runtime type (see soapStub.h)
class xsd__duration_ : public xsd__anyType
{ public:
    xsd__duration                        __item;                       
};

/// Class wrapper for built-in type "xs:float" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__float to check runtime type (see soapStub.h)
class xsd__float : public xsd__anyType
{ public:
    float                                __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__int to check runtime type (see soapStub.h)
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};

/// Class wrapper for built-in type "xs:long" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__long to check runtime type (see soapStub.h)
class xsd__long : public xsd__anyType
{ public:
    LONG64                               __item;                       
};

/// Class wrapper for built-in type "xs:short" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__short to check runtime type (see soapStub.h)
class xsd__short : public xsd__anyType
{ public:
    short                                __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__string to check runtime type (see soapStub.h)
class xsd__string : public xsd__anyType
{ public:
    char*                                __item;                       
};

/// Built-in type "xs:unsignedByte".
typedef unsigned char xsd__unsignedByte;

/// Class wrapper for built-in type "xs:unsignedByte" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedByte_ to check runtime type (see soapStub.h)
class xsd__unsignedByte_ : public xsd__anyType
{ public:
    xsd__unsignedByte                    __item;                       
};

/// Class wrapper for built-in type "xs:unsignedInt" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedInt to check runtime type (see soapStub.h)
class xsd__unsignedInt : public xsd__anyType
{ public:
    unsigned int                         __item;                       
};

/// Class wrapper for built-in type "xs:unsignedLong" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedLong to check runtime type (see soapStub.h)
class xsd__unsignedLong : public xsd__anyType
{ public:
    ULONG64                              __item;                       
};

/// Class wrapper for built-in type "xs:unsignedShort" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedShort to check runtime type (see soapStub.h)
class xsd__unsignedShort : public xsd__anyType
{ public:
    unsigned short                       __item;                       
};

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _ns1__GetCommandToExecute.
class _ns1__GetCommandToExecute;

//  Forward declaration of class _ns1__GetCommandToExecuteResponse.
class _ns1__GetCommandToExecuteResponse;

//  Forward declaration of class _ns1__UpdateCommandStatus.
class _ns1__UpdateCommandStatus;

//  Forward declaration of class _ns1__UpdateCommandStatusResponse.
class _ns1__UpdateCommandStatusResponse;

//  Forward declaration of class _ns1__GetCommandStatus.
class _ns1__GetCommandStatus;

//  Forward declaration of class _ns1__GetCommandStatusResponse.
class _ns1__GetCommandStatusResponse;

//  Forward declaration of class _ns1__InitiateClientCommands.
class _ns1__InitiateClientCommands;

//  Forward declaration of class _ns1__InitiateClientCommandsResponse.
class _ns1__InitiateClientCommandsResponse;

//  Forward declaration of class ns4__MachineContext.
class ns4__MachineContext;

//  Forward declaration of class ns4__EILCommand.
class ns4__EILCommand;

//  Forward declaration of class ns5__ArrayOfstring.
class ns5__ArrayOfstring;

//  Forward declaration of class ns5__ArrayOfKeyValueOfstringstring.
class ns5__ArrayOfKeyValueOfstringstring;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/EILClientManagmentService        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.microsoft.com/2003/10/Serialization/":char is a simpleType restriction of xs:int.
typedef int ns3__char;

/// Class wrapper
class ns3__char__ : public xsd__anyType
{ public:
    ns3__char                            __item;                       
};

/// "http://schemas.microsoft.com/2003/10/Serialization/":duration is a simpleType restriction of xs:duration.
/// Content pattern is "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?" (note: not automatically enforced)
/// Value range is [-P10675199DT2H48M5.4775808S..P10675199DT2H48M5.4775807S]
typedef xsd__duration ns3__duration "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?";

/// Class wrapper
class ns3__duration__ : public xsd__anyType
{ public:
    ns3__duration                        __item;                       
};

/// "http://schemas.microsoft.com/2003/10/Serialization/":guid is a simpleType restriction of xs:string.
/// Content pattern is "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}" (note: not automatically enforced)
typedef char* ns3__guid "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}";

/// Class wrapper
class ns3__guid__ : public xsd__anyType
{ public:
    ns3__guid                            __item;                       
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/EILClientManagmentService        *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns4__MachineType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__MachineType
{
	ns4__MachineType__ANY,	///< xs:string value="ANY"
	ns4__MachineType__HOST_USCOREWILDCARD,	///< xs:string value="HOST_WILDCARD"
	ns4__MachineType__HOST,	///< xs:string value="HOST"
	ns4__MachineType__FQDN,	///< xs:string value="FQDN"
	ns4__MachineType__UUID,	///< xs:string value="UUID"
	ns4__MachineType__COLLECTION,	///< xs:string value="COLLECTION"
};

/// Class wrapper
class ns4__MachineType_ : public xsd__anyType
{ public:
    enum ns4__MachineType                __item;                       
};

/// "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommandStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns4__EILCommandStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__EILCommandStatus
{
	ns4__EILCommandStatus__COMMAND_USCOREISSUED,	///< xs:string value="COMMAND_ISSUED"
	ns4__EILCommandStatus__COMMAND_USCORERECEIVED,	///< xs:string value="COMMAND_RECEIVED"
	ns4__EILCommandStatus__COMMAND_USCOREEXECUTION_USCORESTARTED,	///< xs:string value="COMMAND_EXECUTION_STARTED"
	ns4__EILCommandStatus__COMMAND_USCOREEXECUTION_USCORECOMPLETE,	///< xs:string value="COMMAND_EXECUTION_COMPLETE"
	ns4__EILCommandStatus__COMMAND_USCOREFAILED,	///< xs:string value="COMMAND_FAILED"
	ns4__EILCommandStatus__WAIT_USCOREFOR_USCOREMANUAL_USCORESTEP,	///< xs:string value="WAIT_FOR_MANUAL_STEP"
	ns4__EILCommandStatus__COMMAND_USCORETIMED_USCOREOUT,	///< xs:string value="COMMAND_TIMED_OUT"
	ns4__EILCommandStatus__COMMAND_USCOREDELAYED_USCORERESPONSE,	///< xs:string value="COMMAND_DELAYED_RESPONSE"
	ns4__EILCommandStatus__COMMAND_USCORERETRY,	///< xs:string value="COMMAND_RETRY"
};

/// Class wrapper
class ns4__EILCommandStatus_ : public xsd__anyType
{ public:
    enum ns4__EILCommandStatus           __item;                       
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://tempuri.org/":GetCommandToExecute

/// "http://tempuri.org/":GetCommandToExecute is a complexType.
class _ns1__GetCommandToExecute
{ public:
/// Element ctx of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
    ns4__MachineContext*                 ctx                            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetCommandToExecuteResponse

/// "http://tempuri.org/":GetCommandToExecuteResponse is a complexType.
class _ns1__GetCommandToExecuteResponse
{ public:
/// Element GetCommandToExecuteResult of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand.
    ns4__EILCommand*                     GetCommandToExecuteResult      0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":UpdateCommandStatus

/// "http://tempuri.org/":UpdateCommandStatus is a complexType.
class _ns1__UpdateCommandStatus
{ public:
/// Element ctx of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
    ns4__MachineContext*                 ctx                            0;	///< Nullable pointer.
/// Element cmd of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand.
    ns4__EILCommand*                     cmd                            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":UpdateCommandStatusResponse

/// "http://tempuri.org/":UpdateCommandStatusResponse is a complexType.
class _ns1__UpdateCommandStatusResponse
{ public:
/// Element UpdateCommandStatusResult of type xs:boolean.
    bool*                                UpdateCommandStatusResult      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetCommandStatus

/// "http://tempuri.org/":GetCommandStatus is a complexType.
class _ns1__GetCommandStatus
{ public:
/// Element ctx of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
    ns4__MachineContext*                 ctx                            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetCommandStatusResponse

/// "http://tempuri.org/":GetCommandStatusResponse is a complexType.
class _ns1__GetCommandStatusResponse
{ public:
/// Element GetCommandStatusResult of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
    ns4__MachineContext*                 GetCommandStatusResult         0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":InitiateClientCommands

/// "http://tempuri.org/":InitiateClientCommands is a complexType.
class _ns1__InitiateClientCommands
{ public:
/// Element ctx of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
    ns4__MachineContext*                 ctx                            0;	///< Nullable pointer.
/// Element cmd of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand.
    ns4__EILCommand*                     cmd                            0;	///< Nullable pointer.
/// Element ownrID of type xs:string.
    char*                                ownrID                         0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":InitiateClientCommandsResponse

/// "http://tempuri.org/":InitiateClientCommandsResponse is a complexType.
class _ns1__InitiateClientCommandsResponse
{ public:
/// Element InitiateClientCommandsResult of type xs:string.
    char*                                InitiateClientCommandsResult   0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.datacontract.org/2004/07/EILClientManagmentService        *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext is a complexType.
class ns4__MachineContext : public xsd__anyType
{ public:
/// Element mContext of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
    ns5__ArrayOfstring*                  mContext                       0;	///< Nullable pointer.
/// Element mList of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
    ns5__ArrayOfstring*                  mList                          0;	///< Nullable pointer.
/// Element mParams of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring.
    ns5__ArrayOfKeyValueOfstringstring*  mParams                        0;	///< Nullable pointer.
/// Element mType of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineType.
    enum ns4__MachineType*               mType                          0;	///< Optional element.
};

/// "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand is a complexType.
class ns4__EILCommand : public xsd__anyType
{ public:
/// Element CommandExitMessage of type xs:string.
    char*                                CommandExitMessage             0;	///< Nullable pointer.
/// Element CommandName of type xs:string.
    char*                                CommandName                    0;	///< Nullable pointer.
/// Element CommandParameters of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring.
    ns5__ArrayOfKeyValueOfstringstring*  CommandParameters              0;	///< Nullable pointer.
/// Element CommandPath of type xs:string.
    char*                                CommandPath                    0;	///< Nullable pointer.
/// Element CommandResult of type xs:string.
    char*                                CommandResult                  0;	///< Nullable pointer.
/// Element CommandStatus of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommandStatus.
    enum ns4__EILCommandStatus*          CommandStatus                  0;	///< Optional element.
/// Element CommandSuccessful of type xs:boolean.
    bool*                                CommandSuccessful              0;	///< Optional element.
/// Element ErrorCode of type xs:int.
    int*                                 ErrorCode                      0;	///< Optional element.
/// Element ExpectedTimeOut of type xs:int.
    int*                                 ExpectedTimeOut                0;	///< Optional element.
/// Element OperationID of type xs:string.
    char*                                OperationID                    0;	///< Nullable pointer.
/// Element SetMachineType of type xs:string.
    char*                                SetMachineType                 0;	///< Nullable pointer.
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring is a complexType.
class ns5__ArrayOfstring : public xsd__anyType
{ public:
/// Size of array of char* is 0..unbounded
   $int                                  __sizestring                   0;
/// Pointer to array char* of length 0..unbounded
    char*                               *string                         0;	///< Nullable pointer.
};

/// "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring is a complexType.
class ns5__ArrayOfKeyValueOfstringstring : public xsd__anyType
{ public:
/// Size of KeyValueOfstringstring array is 0..unbounded
   $int                                  __sizeKeyValueOfstringstring   0;
    class _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring
    {
/// Element Key of type xs:string.
    char*                                Key                           ;	///< Nullable pointer.
/// Element Value of type xs:string.
    char*                                Value                         ;	///< Nullable pointer.
    }                                   *KeyValueOfstringstring         0;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyType of type xs:anyType.
typedef xsd__anyType _ns3__anyType;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyURI of type xs:anyURI.
typedef xsd__anyURI _ns3__anyURI;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":base64Binary of type xs:base64Binary.
typedef xsd__base64Binary _ns3__base64Binary;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":boolean of type xs:boolean.
typedef bool _ns3__boolean;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":byte of type xs:byte.
typedef xsd__byte _ns3__byte;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":dateTime of type xs:dateTime.
typedef time_t _ns3__dateTime;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":decimal of type xs:decimal.
typedef xsd__decimal _ns3__decimal;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":double of type xs:double.
typedef double _ns3__double;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":float of type xs:float.
typedef float _ns3__float;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":int of type xs:int.
typedef int _ns3__int;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":long of type xs:long.
typedef LONG64 _ns3__long;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":QName of type xs:QName.
typedef _QName _ns3__QName;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":short of type xs:short.
typedef short _ns3__short;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":string of type xs:string.
typedef char* _ns3__string;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedByte of type xs:unsignedByte.
typedef xsd__unsignedByte _ns3__unsignedByte;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedInt of type xs:unsignedInt.
typedef unsigned int _ns3__unsignedInt;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedLong of type xs:unsignedLong.
typedef ULONG64 _ns3__unsignedLong;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedShort of type xs:unsignedShort.
typedef unsigned short _ns3__unsignedShort;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":char of type "http://schemas.microsoft.com/2003/10/Serialization/":char.
typedef ns3__char _ns3__char;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":duration of type "http://schemas.microsoft.com/2003/10/Serialization/":duration.
typedef ns3__duration _ns3__duration;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":guid of type "http://schemas.microsoft.com/2003/10/Serialization/":guid.
typedef ns3__guid _ns3__guid;

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":FactoryType of simpleType xs:QName.
typedef _QName _ns3__FactoryType;

/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Id of simpleType xs:ID.
typedef xsd__ID _ns3__Id;

/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Ref of simpleType xs:IDREF.
typedef xsd__IDREF _ns3__Ref;

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.datacontract.org/2004/07/EILClientManagmentService        *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
typedef ns4__MachineContext _ns4__MachineContext;

/// Top-level root element "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineType of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineType.
typedef enum ns4__MachineType _ns4__MachineType;

/// Top-level root element "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand.
typedef ns4__EILCommand _ns4__EILCommand;

/// Top-level root element "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommandStatus of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommandStatus.
typedef enum ns4__EILCommandStatus _ns4__EILCommandStatus;

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.datacontract.org/2004/07/EILClientManagmentService        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
typedef ns5__ArrayOfstring _ns5__ArrayOfstring;

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring.
typedef ns5__ArrayOfKeyValueOfstringstring _ns5__ArrayOfKeyValueOfstringstring;

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	WSHttpBinding_USCOREIEILClientOperations 
//gsoap ns1  service type:	IEILClientOperations 
//gsoap ns1  service port:	http://eilauto01.eil-infra.com/CCMS/EILClientOperationsService.svc 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage EILClientOperationsService Definitions

@section EILClientOperationsService_bindings Service Bindings

  - @ref WSHttpBinding_USCOREIEILClientOperations

@section EILClientOperationsService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page WSHttpBinding_USCOREIEILClientOperations Binding "WSHttpBinding_USCOREIEILClientOperations"

@section WSHttpBinding_USCOREIEILClientOperations_operations Operations of Binding  "WSHttpBinding_USCOREIEILClientOperations"

  - @ref __ns1__GetCommandToExecute

  - @ref __ns1__UpdateCommandStatus

  - @ref __ns1__GetCommandStatus

  - @ref __ns1__InitiateClientCommands

@section WSHttpBinding_USCOREIEILClientOperations_ports Endpoints of Binding  "WSHttpBinding_USCOREIEILClientOperations"

  - http://eilauto01.eil-infra.com/CCMS/EILClientOperationsService.svc

@section WSHttpBinding_USCOREIEILClientOperations_policy Policy of Binding  "WSHttpBinding_USCOREIEILClientOperations"

  - WS-Policy applicable to the service endpoint ports:
	- Exactly one of the following:
		- All of the following:
			- Other policy requirements:
	@verbatim
<wsaw:UsingAddressing/>
	@endverbatim

  - WS-Policy enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "import/wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "import/wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "import/wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "import/wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0:
	@code
	#import "import/wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   WSHttpBinding_USCOREIEILClientOperations                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetCommandToExecute                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetCommandToExecute" of service binding "WSHttpBinding_USCOREIEILClientOperations"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/IEILClientOperations/GetCommandToExecute"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetCommandToExecute(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetCommandToExecute*          ns1__GetCommandToExecute,
    // response parameters:
    _ns1__GetCommandToExecuteResponse*  ns1__GetCommandToExecuteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetCommandToExecute(
    struct soap *soap,
    // request parameters:
    _ns1__GetCommandToExecute*          ns1__GetCommandToExecute,
    // response parameters:
    _ns1__GetCommandToExecuteResponse*  ns1__GetCommandToExecuteResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREIEILClientOperationsProxy.h):
@code
  class WSHttpBinding_USCOREIEILClientOperationsProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSHttpBinding_USCOREIEILClientOperationsService.h):
@code
  class WSHttpBinding_USCOREIEILClientOperationsService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetCommandToExecute document
//gsoap ns1  service method-encoding:	GetCommandToExecute literal
//gsoap ns1  service method-action:	GetCommandToExecute http://tempuri.org/IEILClientOperations/GetCommandToExecute
int __ns1__GetCommandToExecute(
    _ns1__GetCommandToExecute*          ns1__GetCommandToExecute,	///< Request parameter
    _ns1__GetCommandToExecuteResponse*  ns1__GetCommandToExecuteResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateCommandStatus                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__UpdateCommandStatus" of service binding "WSHttpBinding_USCOREIEILClientOperations"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/IEILClientOperations/UpdateCommandStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateCommandStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__UpdateCommandStatus*          ns1__UpdateCommandStatus,
    // response parameters:
    _ns1__UpdateCommandStatusResponse*  ns1__UpdateCommandStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateCommandStatus(
    struct soap *soap,
    // request parameters:
    _ns1__UpdateCommandStatus*          ns1__UpdateCommandStatus,
    // response parameters:
    _ns1__UpdateCommandStatusResponse*  ns1__UpdateCommandStatusResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREIEILClientOperationsProxy.h):
@code
  class WSHttpBinding_USCOREIEILClientOperationsProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSHttpBinding_USCOREIEILClientOperationsService.h):
@code
  class WSHttpBinding_USCOREIEILClientOperationsService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	UpdateCommandStatus document
//gsoap ns1  service method-encoding:	UpdateCommandStatus literal
//gsoap ns1  service method-action:	UpdateCommandStatus http://tempuri.org/IEILClientOperations/UpdateCommandStatus
int __ns1__UpdateCommandStatus(
    _ns1__UpdateCommandStatus*          ns1__UpdateCommandStatus,	///< Request parameter
    _ns1__UpdateCommandStatusResponse*  ns1__UpdateCommandStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetCommandStatus                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetCommandStatus" of service binding "WSHttpBinding_USCOREIEILClientOperations"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/IEILClientOperations/GetCommandStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetCommandStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetCommandStatus*             ns1__GetCommandStatus,
    // response parameters:
    _ns1__GetCommandStatusResponse*     ns1__GetCommandStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetCommandStatus(
    struct soap *soap,
    // request parameters:
    _ns1__GetCommandStatus*             ns1__GetCommandStatus,
    // response parameters:
    _ns1__GetCommandStatusResponse*     ns1__GetCommandStatusResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREIEILClientOperationsProxy.h):
@code
  class WSHttpBinding_USCOREIEILClientOperationsProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSHttpBinding_USCOREIEILClientOperationsService.h):
@code
  class WSHttpBinding_USCOREIEILClientOperationsService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetCommandStatus document
//gsoap ns1  service method-encoding:	GetCommandStatus literal
//gsoap ns1  service method-action:	GetCommandStatus http://tempuri.org/IEILClientOperations/GetCommandStatus
int __ns1__GetCommandStatus(
    _ns1__GetCommandStatus*             ns1__GetCommandStatus,	///< Request parameter
    _ns1__GetCommandStatusResponse*     ns1__GetCommandStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__InitiateClientCommands                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__InitiateClientCommands" of service binding "WSHttpBinding_USCOREIEILClientOperations"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/IEILClientOperations/InitiateClientCommands"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__InitiateClientCommands(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__InitiateClientCommands*       ns1__InitiateClientCommands,
    // response parameters:
    _ns1__InitiateClientCommandsResponse* ns1__InitiateClientCommandsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__InitiateClientCommands(
    struct soap *soap,
    // request parameters:
    _ns1__InitiateClientCommands*       ns1__InitiateClientCommands,
    // response parameters:
    _ns1__InitiateClientCommandsResponse* ns1__InitiateClientCommandsResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREIEILClientOperationsProxy.h):
@code
  class WSHttpBinding_USCOREIEILClientOperationsProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSHttpBinding_USCOREIEILClientOperationsService.h):
@code
  class WSHttpBinding_USCOREIEILClientOperationsService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	InitiateClientCommands document
//gsoap ns1  service method-encoding:	InitiateClientCommands literal
//gsoap ns1  service method-action:	InitiateClientCommands http://tempuri.org/IEILClientOperations/InitiateClientCommands
int __ns1__InitiateClientCommands(
    _ns1__InitiateClientCommands*       ns1__InitiateClientCommands,	///< Request parameter
    _ns1__InitiateClientCommandsResponse* ns1__InitiateClientCommandsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema "http://tempuri.org/Imports"

@section ns1 Top-level root elements of schema "http://tempuri.org/"

  - <ns1:GetCommandToExecute> @ref _ns1__GetCommandToExecute
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetCommandToExecute(struct soap*, _ns1__GetCommandToExecute*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetCommandToExecute(struct soap*, _ns1__GetCommandToExecute*);
    @endcode

  - <ns1:GetCommandToExecuteResponse> @ref _ns1__GetCommandToExecuteResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetCommandToExecuteResponse(struct soap*, _ns1__GetCommandToExecuteResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetCommandToExecuteResponse(struct soap*, _ns1__GetCommandToExecuteResponse*);
    @endcode

  - <ns1:UpdateCommandStatus> @ref _ns1__UpdateCommandStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateCommandStatus(struct soap*, _ns1__UpdateCommandStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateCommandStatus(struct soap*, _ns1__UpdateCommandStatus*);
    @endcode

  - <ns1:UpdateCommandStatusResponse> @ref _ns1__UpdateCommandStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateCommandStatusResponse(struct soap*, _ns1__UpdateCommandStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateCommandStatusResponse(struct soap*, _ns1__UpdateCommandStatusResponse*);
    @endcode

  - <ns1:GetCommandStatus> @ref _ns1__GetCommandStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetCommandStatus(struct soap*, _ns1__GetCommandStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetCommandStatus(struct soap*, _ns1__GetCommandStatus*);
    @endcode

  - <ns1:GetCommandStatusResponse> @ref _ns1__GetCommandStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetCommandStatusResponse(struct soap*, _ns1__GetCommandStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetCommandStatusResponse(struct soap*, _ns1__GetCommandStatusResponse*);
    @endcode

  - <ns1:InitiateClientCommands> @ref _ns1__InitiateClientCommands
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InitiateClientCommands(struct soap*, _ns1__InitiateClientCommands*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InitiateClientCommands(struct soap*, _ns1__InitiateClientCommands*);
    @endcode

  - <ns1:InitiateClientCommandsResponse> @ref _ns1__InitiateClientCommandsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InitiateClientCommandsResponse(struct soap*, _ns1__InitiateClientCommandsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InitiateClientCommandsResponse(struct soap*, _ns1__InitiateClientCommandsResponse*);
    @endcode

@section ns3 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/"

  - <ns3:anyType> @ref _ns3__anyType
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__anyType(struct soap*, _ns3__anyType*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__anyType(struct soap*, _ns3__anyType*);
    @endcode

  - <ns3:anyURI> @ref _ns3__anyURI
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__anyURI(struct soap*, _ns3__anyURI*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__anyURI(struct soap*, _ns3__anyURI*);
    @endcode

  - <ns3:base64Binary> @ref _ns3__base64Binary
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__base64Binary(struct soap*, _ns3__base64Binary*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__base64Binary(struct soap*, _ns3__base64Binary*);
    @endcode

  - <ns3:boolean> @ref _ns3__boolean
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__boolean(struct soap*, _ns3__boolean*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__boolean(struct soap*, _ns3__boolean*);
    @endcode

  - <ns3:byte> @ref _ns3__byte
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__byte(struct soap*, _ns3__byte*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__byte(struct soap*, _ns3__byte*);
    @endcode

  - <ns3:dateTime> @ref _ns3__dateTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__dateTime(struct soap*, _ns3__dateTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__dateTime(struct soap*, _ns3__dateTime*);
    @endcode

  - <ns3:decimal> @ref _ns3__decimal
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__decimal(struct soap*, _ns3__decimal*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__decimal(struct soap*, _ns3__decimal*);
    @endcode

  - <ns3:double> @ref _ns3__double
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__double(struct soap*, _ns3__double*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__double(struct soap*, _ns3__double*);
    @endcode

  - <ns3:float> @ref _ns3__float
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__float(struct soap*, _ns3__float*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__float(struct soap*, _ns3__float*);
    @endcode

  - <ns3:int> @ref _ns3__int
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__int(struct soap*, _ns3__int*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__int(struct soap*, _ns3__int*);
    @endcode

  - <ns3:long> @ref _ns3__long
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__long(struct soap*, _ns3__long*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__long(struct soap*, _ns3__long*);
    @endcode

  - <ns3:QName> @ref _ns3__QName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__QName(struct soap*, _ns3__QName*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__QName(struct soap*, _ns3__QName*);
    @endcode

  - <ns3:short> @ref _ns3__short
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__short(struct soap*, _ns3__short*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__short(struct soap*, _ns3__short*);
    @endcode

  - <ns3:string> @ref _ns3__string
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__string(struct soap*, _ns3__string*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__string(struct soap*, _ns3__string*);
    @endcode

  - <ns3:unsignedByte> @ref _ns3__unsignedByte
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__unsignedByte(struct soap*, _ns3__unsignedByte*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__unsignedByte(struct soap*, _ns3__unsignedByte*);
    @endcode

  - <ns3:unsignedInt> @ref _ns3__unsignedInt
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__unsignedInt(struct soap*, _ns3__unsignedInt*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__unsignedInt(struct soap*, _ns3__unsignedInt*);
    @endcode

  - <ns3:unsignedLong> @ref _ns3__unsignedLong
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__unsignedLong(struct soap*, _ns3__unsignedLong*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__unsignedLong(struct soap*, _ns3__unsignedLong*);
    @endcode

  - <ns3:unsignedShort> @ref _ns3__unsignedShort
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__unsignedShort(struct soap*, _ns3__unsignedShort*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__unsignedShort(struct soap*, _ns3__unsignedShort*);
    @endcode

  - <ns3:char> @ref _ns3__char
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__char(struct soap*, _ns3__char*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__char(struct soap*, _ns3__char*);
    @endcode

  - <ns3:duration> @ref _ns3__duration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__duration(struct soap*, _ns3__duration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__duration(struct soap*, _ns3__duration*);
    @endcode

  - <ns3:guid> @ref _ns3__guid
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__guid(struct soap*, _ns3__guid*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__guid(struct soap*, _ns3__guid*);
    @endcode

@section ns4 Top-level root elements of schema "http://schemas.datacontract.org/2004/07/EILClientManagmentService"

  - <ns4:MachineContext> @ref _ns4__MachineContext
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__MachineContext(struct soap*, _ns4__MachineContext*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__MachineContext(struct soap*, _ns4__MachineContext*);
    @endcode

  - <ns4:MachineType> @ref _ns4__MachineType
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__MachineType(struct soap*, _ns4__MachineType*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__MachineType(struct soap*, _ns4__MachineType*);
    @endcode

  - <ns4:EILCommand> @ref _ns4__EILCommand
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__EILCommand(struct soap*, _ns4__EILCommand*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__EILCommand(struct soap*, _ns4__EILCommand*);
    @endcode

  - <ns4:EILCommandStatus> @ref _ns4__EILCommandStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__EILCommandStatus(struct soap*, _ns4__EILCommandStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__EILCommandStatus(struct soap*, _ns4__EILCommandStatus*);
    @endcode

@section ns5 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

  - <ns5:ArrayOfstring> @ref _ns5__ArrayOfstring
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__ArrayOfstring(struct soap*, _ns5__ArrayOfstring*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__ArrayOfstring(struct soap*, _ns5__ArrayOfstring*);
    @endcode

  - <ns5:ArrayOfKeyValueOfstringstring> @ref _ns5__ArrayOfKeyValueOfstringstring
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__ArrayOfKeyValueOfstringstring(struct soap*, _ns5__ArrayOfKeyValueOfstringstring*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__ArrayOfKeyValueOfstringstring(struct soap*, _ns5__ArrayOfKeyValueOfstringstring*);
    @endcode

*/

/* End of EILClientOps.h */
/*
 * The following is appended when we rebuild the gSOAP bindings
 */
#import "soap12.h"
#import "wsa5.h"
