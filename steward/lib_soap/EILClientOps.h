/* EILClientOps.h
   Generated by wsdl2h 1.2.9l from http://10.10.0.20/CCMS/EILClientOperationsService.svc?wsdl and typemap.dat
   2010-11-15 23:14:47 GMT
   Copyright (C) 2001-2007 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * http://tempuri.org/                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://tempuri.org/"
ns2 = "http://tempuri.org/Imports"
ns3 = "http://schemas.microsoft.com/2003/10/Serialization/"
ns4 = "http://schemas.datacontract.org/2004/07/EILClientManagmentService"
ns5 = "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

*/

//gsoap ns2   schema namespace:	http://tempuri.org/Imports
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns3   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/
//gsoap ns4   schema namespace:	http://schemas.datacontract.org/2004/07/EILClientManagmentService
//gsoap ns5   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/Arrays
//gsoap ns2   schema form:	unqualified
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified
//gsoap ns3   schema form:	qualified
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified
//gsoap ns5   schema elementForm:	qualified
//gsoap ns5   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/

class xsd__anyType { _XML __item; struct soap *soap; };

/// Primitive built-in type "xs:ID"
typedef std::string xsd__ID;

/// Class wrapper for built-in type "xs:ID" derived from xsd__anyType
class xsd__ID_ : public xsd__anyType
{ public:
    xsd__ID                              __item;                       
};

/// Primitive built-in type "xs:IDREF"
typedef std::string xsd__IDREF;

/// Class wrapper for built-in type "xs:IDREF" derived from xsd__anyType
class xsd__IDREF_ : public xsd__anyType
{ public:
    xsd__IDREF                           __item;                       
};

/// Primitive built-in type "xs:QName"
typedef std::string xsd__QName;

/// Class wrapper for built-in type "xs:QName" derived from xsd__anyType
class xsd__QName_ : public xsd__anyType
{ public:
    xsd__QName                           __item;                       
};

/// Primitive built-in type "xs:anyURI"
typedef std::string xsd__anyURI;

/// Class wrapper for built-in type "xs:anyURI" derived from xsd__anyType
class xsd__anyURI_ : public xsd__anyType
{ public:
    xsd__anyURI                          __item;                       
};

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};

/// Class wrapper for built-in type "xs:base64Binary" derived from xsd__anyType
class xsd__base64Binary_ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item;                       
};

/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Class wrapper for built-in type "xs:byte" derived from xsd__anyType
class xsd__byte : public xsd__anyType
{ public:
    char                                 __item;                       
};

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType
class xsd__dateTime : public xsd__anyType
{ public:
    time_t                               __item;                       
};

/// Primitive built-in type "xs:decimal"
typedef std::string xsd__decimal;

/// Class wrapper for built-in type "xs:decimal" derived from xsd__anyType
class xsd__decimal_ : public xsd__anyType
{ public:
    xsd__decimal                         __item;                       
};

/// Class wrapper for built-in type "xs:double" derived from xsd__anyType
class xsd__double : public xsd__anyType
{ public:
    double                               __item;                       
};

/// Primitive built-in type "xs:duration"
typedef std::string xsd__duration;

/// Class wrapper for built-in type "xs:duration" derived from xsd__anyType
class xsd__duration_ : public xsd__anyType
{ public:
    xsd__duration                        __item;                       
};

/// Class wrapper for built-in type "xs:float" derived from xsd__anyType
class xsd__float : public xsd__anyType
{ public:
    float                                __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};

/// Class wrapper for built-in type "xs:long" derived from xsd__anyType
class xsd__long : public xsd__anyType
{ public:
    LONG64                               __item;                       
};

/// Class wrapper for built-in type "xs:short" derived from xsd__anyType
class xsd__short : public xsd__anyType
{ public:
    short                                __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType
class xsd__string : public xsd__anyType
{ public:
    std::string                          __item;                       
};

/// Class wrapper for built-in type "xs:unsignedByte" derived from xsd__anyType
class xsd__unsignedByte : public xsd__anyType
{ public:
    unsigned char                        __item;                       
};

/// Class wrapper for built-in type "xs:unsignedInt" derived from xsd__anyType
class xsd__unsignedInt : public xsd__anyType
{ public:
    unsigned int                         __item;                       
};

/// Class wrapper for built-in type "xs:unsignedLong" derived from xsd__anyType
class xsd__unsignedLong : public xsd__anyType
{ public:
    ULONG64                              __item;                       
};

/// Class wrapper for built-in type "xs:unsignedShort" derived from xsd__anyType
class xsd__unsignedShort : public xsd__anyType
{ public:
    unsigned short                       __item;                       
};


//  Forward declaration of class _ns1__GetCommandToExecute.
class _ns1__GetCommandToExecute;

//  Forward declaration of class _ns1__GetCommandToExecuteResponse.
class _ns1__GetCommandToExecuteResponse;

//  Forward declaration of class _ns1__UpdateCommandStatus.
class _ns1__UpdateCommandStatus;

//  Forward declaration of class _ns1__UpdateCommandStatusResponse.
class _ns1__UpdateCommandStatusResponse;

//  Forward declaration of class _ns1__GetCommandStatus.
class _ns1__GetCommandStatus;

//  Forward declaration of class _ns1__GetCommandStatusResponse.
class _ns1__GetCommandStatusResponse;

//  Forward declaration of class _ns1__InitiateClientCommands.
class _ns1__InitiateClientCommands;

//  Forward declaration of class _ns1__InitiateClientCommandsResponse.
class _ns1__InitiateClientCommandsResponse;

//  Forward declaration of class ns4__MachineContext.
class ns4__MachineContext;

//  Forward declaration of class ns4__EILCommand.
class ns4__EILCommand;

//  Forward declaration of class ns5__ArrayOfstring.
class ns5__ArrayOfstring;

//  Forward declaration of class ns5__ArrayOfKeyValueOfstringstring.
class ns5__ArrayOfKeyValueOfstringstring;

/// "http://schemas.microsoft.com/2003/10/Serialization/":char is a simpleType restriction of xs:int.
typedef int ns3__char;

/// Class wrapper
class ns3__char__ : public xsd__anyType
{ public:
    ns3__char                            __item;                       
};

/// "http://schemas.microsoft.com/2003/10/Serialization/":duration is a simpleType restriction of xs:duration.
/// Content pattern is "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?"
/// Value range is [-P10675199DT2H48M5.4775808S..P10675199DT2H48M5.4775807S]
typedef xsd__duration ns3__duration "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?";

/// Class wrapper
class ns3__duration__ : public xsd__anyType
{ public:
    ns3__duration                        __item;                       
};

/// "http://schemas.microsoft.com/2003/10/Serialization/":guid is a simpleType restriction of xs:string.
/// Content pattern is "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}"
typedef std::string ns3__guid "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}";

/// Class wrapper
class ns3__guid__ : public xsd__anyType
{ public:
    ns3__guid                            __item;                       
};

/// "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns4__MachineType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__MachineType
{
	ns4__MachineType__ANY,	///< xs:string value="ANY"
	ns4__MachineType__HOST_USCOREWILDCARD,	///< xs:string value="HOST_WILDCARD"
	ns4__MachineType__HOST,	///< xs:string value="HOST"
	ns4__MachineType__FQDN,	///< xs:string value="FQDN"
	ns4__MachineType__UUID,	///< xs:string value="UUID"
	ns4__MachineType__COLLECTION,	///< xs:string value="COLLECTION"
};

/// Class wrapper
class ns4__MachineType_ : public xsd__anyType
{ public:
    enum ns4__MachineType                __item;                       
};

/// "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommandStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns4__EILCommandStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__EILCommandStatus
{
	ns4__EILCommandStatus__COMMAND_USCOREISSUED,	///< xs:string value="COMMAND_ISSUED"
	ns4__EILCommandStatus__COMMAND_USCORERECEIVED,	///< xs:string value="COMMAND_RECEIVED"
	ns4__EILCommandStatus__COMMAND_USCOREEXECUTION_USCORESTARTED,	///< xs:string value="COMMAND_EXECUTION_STARTED"
	ns4__EILCommandStatus__COMMAND_USCOREEXECUTION_USCORECOMPLETE,	///< xs:string value="COMMAND_EXECUTION_COMPLETE"
	ns4__EILCommandStatus__COMMAND_USCOREFAILED,	///< xs:string value="COMMAND_FAILED"
	ns4__EILCommandStatus__WAIT_USCOREFOR_USCOREMANUAL_USCORESTEP,	///< xs:string value="WAIT_FOR_MANUAL_STEP"
	ns4__EILCommandStatus__COMMAND_USCORETIMED_USCOREOUT,	///< xs:string value="COMMAND_TIMED_OUT"
	ns4__EILCommandStatus__COMMAND_USCOREDELAYED_USCORERESPONSE,	///< xs:string value="COMMAND_DELAYED_RESPONSE"
	ns4__EILCommandStatus__COMMAND_USCORERETRY,	///< xs:string value="COMMAND_RETRY"
};

/// Class wrapper
class ns4__EILCommandStatus_ : public xsd__anyType
{ public:
    enum ns4__EILCommandStatus           __item;                       
};


/// Element "http://tempuri.org/":GetCommandToExecute of complexType.

/// "http://tempuri.org/":GetCommandToExecute is a complexType.
class _ns1__GetCommandToExecute
{ public:
/// Element ctx of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
    ns4__MachineContext*                 ctx                            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://tempuri.org/":GetCommandToExecuteResponse of complexType.

/// "http://tempuri.org/":GetCommandToExecuteResponse is a complexType.
class _ns1__GetCommandToExecuteResponse
{ public:
/// Element GetCommandToExecuteResult of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand.
    ns4__EILCommand*                     GetCommandToExecuteResult      0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://tempuri.org/":UpdateCommandStatus of complexType.

/// "http://tempuri.org/":UpdateCommandStatus is a complexType.
class _ns1__UpdateCommandStatus
{ public:
/// Element ctx of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
    ns4__MachineContext*                 ctx                            0;	///< Nullable pointer.
/// Element cmd of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand.
    ns4__EILCommand*                     cmd                            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://tempuri.org/":UpdateCommandStatusResponse of complexType.

/// "http://tempuri.org/":UpdateCommandStatusResponse is a complexType.
class _ns1__UpdateCommandStatusResponse
{ public:
/// Element UpdateCommandStatusResult of type xs:boolean.
    bool*                                UpdateCommandStatusResult      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://tempuri.org/":GetCommandStatus of complexType.

/// "http://tempuri.org/":GetCommandStatus is a complexType.
class _ns1__GetCommandStatus
{ public:
/// Element ctx of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
    ns4__MachineContext*                 ctx                            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://tempuri.org/":GetCommandStatusResponse of complexType.

/// "http://tempuri.org/":GetCommandStatusResponse is a complexType.
class _ns1__GetCommandStatusResponse
{ public:
/// Element GetCommandStatusResult of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
    ns4__MachineContext*                 GetCommandStatusResult         0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://tempuri.org/":InitiateClientCommands of complexType.

/// "http://tempuri.org/":InitiateClientCommands is a complexType.
class _ns1__InitiateClientCommands
{ public:
/// Element ctx of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
    ns4__MachineContext*                 ctx                            0;	///< Nullable pointer.
/// Element cmd of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand.
    ns4__EILCommand*                     cmd                            0;	///< Nullable pointer.
/// Element ownrID of type xs:string.
    std::string*                         ownrID                         0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://tempuri.org/":InitiateClientCommandsResponse of complexType.

/// "http://tempuri.org/":InitiateClientCommandsResponse is a complexType.
class _ns1__InitiateClientCommandsResponse
{ public:
/// Element InitiateClientCommandsResult of type xs:string.
    std::string*                         InitiateClientCommandsResult   0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext is a complexType.
class ns4__MachineContext : public xsd__anyType
{ public:
/// Element mContext of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
    ns5__ArrayOfstring*                  mContext                       0;	///< Nullable pointer.
/// Element mList of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
    ns5__ArrayOfstring*                  mList                          0;	///< Nullable pointer.
/// Element mParams of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring.
    ns5__ArrayOfKeyValueOfstringstring*  mParams                        0;	///< Nullable pointer.
/// Element mType of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineType.
    enum ns4__MachineType*               mType                          0;	///< Optional element.
};

/// "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand is a complexType.
class ns4__EILCommand : public xsd__anyType
{ public:
/// Element CommandExitMessage of type xs:string.
    std::string*                         CommandExitMessage             0;	///< Nullable pointer.
/// Element CommandName of type xs:string.
    std::string*                         CommandName                    0;	///< Nullable pointer.
/// Element CommandParameters of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring.
    ns5__ArrayOfKeyValueOfstringstring*  CommandParameters              0;	///< Nullable pointer.
/// Element CommandPath of type xs:string.
    std::string*                         CommandPath                    0;	///< Nullable pointer.
/// Element CommandResult of type xs:string.
    std::string*                         CommandResult                  0;	///< Nullable pointer.
/// Element CommandStatus of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommandStatus.
    enum ns4__EILCommandStatus*          CommandStatus                  0;	///< Optional element.
/// Element CommandSuccessful of type xs:boolean.
    bool*                                CommandSuccessful              0;	///< Optional element.
/// Element ErrorCode of type xs:int.
    int*                                 ErrorCode                      0;	///< Optional element.
/// Element ExpectedTimeOut of type xs:int.
    int*                                 ExpectedTimeOut                0;	///< Optional element.
/// Element OperationID of type xs:string.
    std::string*                         OperationID                    0;	///< Nullable pointer.
/// Element SetMachineType of type xs:string.
    std::string*                         SetMachineType                 0;	///< Nullable pointer.
};

/// "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring is a complexType.
class ns5__ArrayOfstring : public xsd__anyType
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > string                         0;	///< Nullable pointer.
};

/// "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring is a complexType.
class ns5__ArrayOfKeyValueOfstringstring : public xsd__anyType
{ public:
/// Size of KeyValueOfstringstring array is 0..unbounded
    int                                  __sizeKeyValueOfstringstring  ;
    class _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring
    {
/// Element Key of type xs:string.
    std::string*                         Key                           ;	///< Nullable pointer.
/// Element Value of type xs:string.
    std::string*                         Value                         ;	///< Nullable pointer.
    }                                   *KeyValueOfstringstring         0;
};

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":anyType of type xs:anyType.
typedef xsd__anyType _ns3__anyType;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":anyURI of type xs:anyURI.
typedef xsd__anyURI _ns3__anyURI;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":base64Binary of type xs:base64Binary.
typedef xsd__base64Binary _ns3__base64Binary;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":boolean of type xs:boolean.
typedef bool _ns3__boolean;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":byte of type xs:byte.
typedef char _ns3__byte;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":dateTime of type xs:dateTime.
typedef time_t _ns3__dateTime;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":decimal of type xs:decimal.
typedef xsd__decimal _ns3__decimal;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":double of type xs:double.
typedef double _ns3__double;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":float of type xs:float.
typedef float _ns3__float;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":int of type xs:int.
typedef int _ns3__int;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":long of type xs:long.
typedef LONG64 _ns3__long;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":QName of type xs:QName.
typedef xsd__QName _ns3__QName;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":short of type xs:short.
typedef short _ns3__short;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":string of type xs:string.
typedef std::string _ns3__string;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedByte of type xs:unsignedByte.
typedef unsigned char _ns3__unsignedByte;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedInt of type xs:unsignedInt.
typedef unsigned int _ns3__unsignedInt;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedLong of type xs:unsignedLong.
typedef ULONG64 _ns3__unsignedLong;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedShort of type xs:unsignedShort.
typedef unsigned short _ns3__unsignedShort;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":char of type "http://schemas.microsoft.com/2003/10/Serialization/":char.
typedef ns3__char _ns3__char;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":duration of type "http://schemas.microsoft.com/2003/10/Serialization/":duration.
typedef ns3__duration _ns3__duration;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/":guid of type "http://schemas.microsoft.com/2003/10/Serialization/":guid.
typedef ns3__guid _ns3__guid;

/// Attribute "http://schemas.microsoft.com/2003/10/Serialization/":FactoryType of simpleType xs:QName.
typedef xsd__QName _ns3__FactoryType;

/// Attribute "http://schemas.microsoft.com/2003/10/Serialization/":Id of simpleType xs:ID.
typedef xsd__ID _ns3__Id;

/// Attribute "http://schemas.microsoft.com/2003/10/Serialization/":Ref of simpleType xs:IDREF.
typedef xsd__IDREF _ns3__Ref;

/// Element "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineContext.
typedef ns4__MachineContext _ns4__MachineContext;

/// Element "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineType of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":MachineType.
typedef enum ns4__MachineType _ns4__MachineType;

/// Element "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommand.
typedef ns4__EILCommand _ns4__EILCommand;

/// Element "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommandStatus of type "http://schemas.datacontract.org/2004/07/EILClientManagmentService":EILCommandStatus.
typedef enum ns4__EILCommandStatus _ns4__EILCommandStatus;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
typedef ns5__ArrayOfstring _ns5__ArrayOfstring;

/// Element "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring.
typedef ns5__ArrayOfKeyValueOfstringstring _ns5__ArrayOfKeyValueOfstringstring;

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	WSHttpBinding_USCOREIEILClientOperations 
//gsoap ns1  service type:	IEILClientOperations 
//gsoap ns1  service port:	http://rmssvr01.eil-infra.com/CCMS/EILClientOperationsService.svc 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage EILClientOperationsService Definitions

@section EILClientOperationsService_bindings Bindings
  - @ref WSHttpBinding_USCOREIEILClientOperations

*/

/**

@page WSHttpBinding_USCOREIEILClientOperations Binding "WSHttpBinding_USCOREIEILClientOperations"

@section WSHttpBinding_USCOREIEILClientOperations_operations Operations of Binding  "WSHttpBinding_USCOREIEILClientOperations"
  - @ref __ns1__GetCommandToExecute
  - @ref __ns1__UpdateCommandStatus
  - @ref __ns1__GetCommandStatus
  - @ref __ns1__InitiateClientCommands

@section WSHttpBinding_USCOREIEILClientOperations_ports Endpoints of Binding  "WSHttpBinding_USCOREIEILClientOperations"
  - http://rmssvr01.eil-infra.com/CCMS/EILClientOperationsService.svc

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * WSHttpBinding_USCOREIEILClientOperations                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __ns1__GetCommandToExecute                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetCommandToExecute" of service binding "WSHttpBinding_USCOREIEILClientOperations"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IEILClientOperations/GetCommandToExecute"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetCommandToExecute(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetCommandToExecute*          ns1__GetCommandToExecute,
    // response parameters:
    _ns1__GetCommandToExecuteResponse*  ns1__GetCommandToExecuteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetCommandToExecute(
    struct soap *soap,
    // request parameters:
    _ns1__GetCommandToExecute*          ns1__GetCommandToExecute,
    // response parameters:
    _ns1__GetCommandToExecuteResponse*  ns1__GetCommandToExecuteResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREIEILClientOperationsProxy.h):
  class WSHttpBinding_USCOREIEILClientOperations;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	GetCommandToExecute document
//gsoap ns1  service method-encoding:	GetCommandToExecute literal
//gsoap ns1  service method-action:	GetCommandToExecute http://tempuri.org/IEILClientOperations/GetCommandToExecute
int __ns1__GetCommandToExecute(
    _ns1__GetCommandToExecute*          ns1__GetCommandToExecute,	///< Request parameter
    _ns1__GetCommandToExecuteResponse*  ns1__GetCommandToExecuteResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __ns1__UpdateCommandStatus                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__UpdateCommandStatus" of service binding "WSHttpBinding_USCOREIEILClientOperations"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IEILClientOperations/UpdateCommandStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateCommandStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__UpdateCommandStatus*          ns1__UpdateCommandStatus,
    // response parameters:
    _ns1__UpdateCommandStatusResponse*  ns1__UpdateCommandStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateCommandStatus(
    struct soap *soap,
    // request parameters:
    _ns1__UpdateCommandStatus*          ns1__UpdateCommandStatus,
    // response parameters:
    _ns1__UpdateCommandStatusResponse*  ns1__UpdateCommandStatusResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREIEILClientOperationsProxy.h):
  class WSHttpBinding_USCOREIEILClientOperations;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	UpdateCommandStatus document
//gsoap ns1  service method-encoding:	UpdateCommandStatus literal
//gsoap ns1  service method-action:	UpdateCommandStatus http://tempuri.org/IEILClientOperations/UpdateCommandStatus
int __ns1__UpdateCommandStatus(
    _ns1__UpdateCommandStatus*          ns1__UpdateCommandStatus,	///< Request parameter
    _ns1__UpdateCommandStatusResponse*  ns1__UpdateCommandStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __ns1__GetCommandStatus                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetCommandStatus" of service binding "WSHttpBinding_USCOREIEILClientOperations"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IEILClientOperations/GetCommandStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetCommandStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetCommandStatus*             ns1__GetCommandStatus,
    // response parameters:
    _ns1__GetCommandStatusResponse*     ns1__GetCommandStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetCommandStatus(
    struct soap *soap,
    // request parameters:
    _ns1__GetCommandStatus*             ns1__GetCommandStatus,
    // response parameters:
    _ns1__GetCommandStatusResponse*     ns1__GetCommandStatusResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREIEILClientOperationsProxy.h):
  class WSHttpBinding_USCOREIEILClientOperations;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	GetCommandStatus document
//gsoap ns1  service method-encoding:	GetCommandStatus literal
//gsoap ns1  service method-action:	GetCommandStatus http://tempuri.org/IEILClientOperations/GetCommandStatus
int __ns1__GetCommandStatus(
    _ns1__GetCommandStatus*             ns1__GetCommandStatus,	///< Request parameter
    _ns1__GetCommandStatusResponse*     ns1__GetCommandStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __ns1__InitiateClientCommands                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__InitiateClientCommands" of service binding "WSHttpBinding_USCOREIEILClientOperations"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IEILClientOperations/InitiateClientCommands"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__InitiateClientCommands(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__InitiateClientCommands*       ns1__InitiateClientCommands,
    // response parameters:
    _ns1__InitiateClientCommandsResponse* ns1__InitiateClientCommandsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__InitiateClientCommands(
    struct soap *soap,
    // request parameters:
    _ns1__InitiateClientCommands*       ns1__InitiateClientCommands,
    // response parameters:
    _ns1__InitiateClientCommandsResponse* ns1__InitiateClientCommandsResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREIEILClientOperationsProxy.h):
  class WSHttpBinding_USCOREIEILClientOperations;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	InitiateClientCommands document
//gsoap ns1  service method-encoding:	InitiateClientCommands literal
//gsoap ns1  service method-action:	InitiateClientCommands http://tempuri.org/IEILClientOperations/InitiateClientCommands
int __ns1__InitiateClientCommands(
    _ns1__InitiateClientCommands*       ns1__InitiateClientCommands,	///< Request parameter
    _ns1__InitiateClientCommandsResponse* ns1__InitiateClientCommandsResponse	///< Response parameter
);

/* End of EILClientOps.h */
struct SOAP_ENV__Header
{
   char *t__Action;
   mustUnderstand char *t__MessageID;
   mustUnderstand char *t__To;
   struct t__ReplyTo
   {
      char *t__Address;
   };
};
