* Add MAC address alternative support to hostname

* Verify that we are locking and one-and-only-one instance of eil_steward can
  run at once.

* Further re-test items now that we have done massive re-working of installer
  items to make ESXi happy (especially on systems where BASH/ash/dash will be
  an issue).

* Find out why steward is crashing on ESXi after we attempt to call CCMS
  (debugging is going to be hard there...)

* Fully isolate gSOAP interfaces to stewardService, and instrument
  stewardService as a possible dynamically loadable library (optional build
  parameter). This is in the event that we decide to move the client agent off
  network and are forced to deal with GPL compliance issues, we then have the
  option of LGPL'ing the stewardService itself and leaving the rest of the
  agent unencumbered.

* Would be nice to re-write the lib_soap bindings to eliminate dependence on
  WSDL2h and soapcpp tools

* "Escape-hatch" for eil_steward.cpp that writes the PID to a file of the
  process that is actually executing the CCMS commands. This stems from a
  conversation with Stewart- the idea here is "what if we eventually need to
  run multiple, long-running, workloads at once where we'd need to fork the
  steward itself?" If the steward were to fork, the CCMS logic would get all
  messed up. So, by putting a PID of the original source PID to a specific
  file, future forks can check to see if *they* are that PID and the choose
  whether to even run the CCMS logic based upon whether or not they are the
  original, source CCMS command steward.
